{"version":3,"file":"auth.controller.js","sourceRoot":"/","sources":["src/auth/auth.controller.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport {\r\n  Body,\r\n  Controller,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Inject,\r\n  Post,\r\n  Get,\r\n  UseGuards,\r\n  Request,\r\n  Response,\r\n} from '@nestjs/common';\r\nimport { Routes, Services } from 'src/utils/constants';\r\nimport { AuthEmailLoginDto } from './dtos/auth-email-login.dto';\r\nimport { LoginResponseType } from './types/login-response.type';\r\nimport { AuthRegisterDto } from './dtos/auth-register.dto';\r\nimport { AuthConfirmEmailDto } from './dtos/auth-confirm-email.dto';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { NullableType } from 'src/utils/types/nullable.type';\r\nimport { AuthForgotPasswordDto } from './dtos/auth-forgot-password.dto';\r\nimport { AuthResetPasswordDto } from './dtos/auth-reset-password.dto';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiTags,\r\n} from '@nestjs/swagger';\r\nimport { User } from 'src/typeorm/entities/user.entity';\r\nimport { IAuthService } from './auth';\r\nimport { LoginResponseDto } from './dtos/login-response.dto';\r\nimport { RefreshTokenResponseDto } from './dtos/auth-refreshtoken-response.dto';\r\nimport { StatusResponseDto } from './dtos/auth-status.dto';\r\nimport { GoogleAuthGuard } from './strategies/google-guards';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { AllConfigType } from 'src/config/config.type';\r\nimport { EncryptService } from 'src/encrypt/encrypt.service';\r\n\r\n@ApiTags('Auth')\r\n@Controller(Routes.AUTH)\r\nexport class AuthController {\r\n  constructor(\r\n    private configService: ConfigService<AllConfigType>,\r\n    private encryptService: EncryptService,\r\n    @Inject(Services.AUTH) private readonly authService: IAuthService,\r\n  ) {}\r\n\r\n  @Post('login')\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({ summary: 'Login with email and password' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Successful login',\r\n    type: LoginResponseDto,\r\n  })\r\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\r\n  login(@Body() loginDto: AuthEmailLoginDto): Promise<LoginResponseType> {\r\n    return this.authService.validateLogin(loginDto);\r\n  }\r\n\r\n  @Post('register')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'Register a new user' })\r\n  @ApiResponse({ status: 204, description: 'User registered successfully' })\r\n  async register(@Body() createUserDto: AuthRegisterDto): Promise<void> {\r\n    console.log('Received Register DTO:', createUserDto);\r\n    return await this.authService.registerUser(createUserDto);\r\n  }\r\n\r\n  @Post('confirm-email')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'Email confirmation' })\r\n  @ApiResponse({ status: 204, description: 'Email confirmation successful!' })\r\n  async confirmEmail(\r\n    @Body() confirmEmailDto: AuthConfirmEmailDto,\r\n  ): Promise<void> {\r\n    return this.authService.confirmEmail(confirmEmailDto.hash);\r\n  }\r\n\r\n  @ApiBearerAuth()\r\n  @Get('status')\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({ summary: 'Get the user status' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'User status successfully retrieved',\r\n    type: StatusResponseDto,\r\n  })\r\n  public status(\r\n    @Request() request,\r\n  ): Promise<\r\n    NullableType<User | { totalDeposits: number; totalWithdrawals: number }>\r\n  > {\r\n    return this.authService.status(request.user);\r\n  }\r\n\r\n  @Post('forgot-password')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'Forgot password' })\r\n  @ApiResponse({\r\n    status: 204,\r\n    description: 'Forgot password email link with hash successfully sent!',\r\n  })\r\n  async forgotPassword(\r\n    @Body() forgotPasswordDto: AuthForgotPasswordDto,\r\n  ): Promise<void> {\r\n    return this.authService.forgotPassword(forgotPasswordDto.email);\r\n  }\r\n\r\n  @Post('reset-password')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'Reset password' })\r\n  @ApiResponse({\r\n    status: 204,\r\n    description: 'Password reset successfully!',\r\n  })\r\n  resetPassword(@Body() resetPasswordDto: AuthResetPasswordDto): Promise<void> {\r\n    return this.authService.resetPassword(\r\n      resetPasswordDto.hash,\r\n      resetPasswordDto.password,\r\n    );\r\n  }\r\n\r\n  @ApiBearerAuth()\r\n  @Post('refresh')\r\n  @UseGuards(AuthGuard('jwt-refresh'))\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({ summary: 'Refresh Token' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Token successfully refreshed!',\r\n    type: RefreshTokenResponseDto,\r\n  })\r\n  public refresh(@Request() request): Promise<Omit<LoginResponseType, 'user'>> {\r\n    return this.authService.refreshToken({\r\n      sessionId: request.user.sessionId,\r\n    });\r\n  }\r\n\r\n  @ApiBearerAuth()\r\n  @Post('logout')\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'Logout' })\r\n  @ApiResponse({\r\n    status: 204,\r\n    description: 'Logout successful!',\r\n  })\r\n  public async logout(@Request() request): Promise<void> {\r\n    await this.authService.logout({\r\n      sessionId: request.user.sessionId,\r\n    });\r\n  }\r\n\r\n  @Get('google/login')\r\n  @UseGuards(GoogleAuthGuard)\r\n  handleGoogleLogin() {\r\n    return { msg: 'Google Authentication' };\r\n  }\r\n\r\n  @Get('google/redirect')\r\n  @UseGuards(GoogleAuthGuard)\r\n  async googleAuthRedirect(@Request() request, @Response() response) {\r\n    // console.log('Redirecting');\r\n    try {\r\n      const frontendDomain = this.configService.get<string>(\r\n        'app.frontendDomain',\r\n        {\r\n          infer: true,\r\n        },\r\n      );\r\n      const text = JSON.stringify({\r\n        ttl: new Date().setSeconds(60),\r\n        id: request.user,\r\n      });\r\n      const encryptedId = this.encryptService.encryptSingle(text);\r\n\r\n      return response.redirect(\r\n        `${frontendDomain}/dashboard?r_id=${encodeURIComponent(encryptedId)}`,\r\n      );\r\n    } catch (error) {\r\n      console.error('Error hashing user:', error);\r\n      return response.status(500).send('Internal Server Error');\r\n    }\r\n  }\r\n\r\n  // @Get('google/extension/redirect')\r\n  // async googleAuthExtensionRedirect(\r\n  //   @Query('code') code: string,\r\n  //   @Response() res,\r\n  // ) {\r\n  //   try {\r\n  //     const userData = await this.authService.handleGoogleRedirect(code);\r\n  //     res.json(userData);\r\n  //   } catch (error) {\r\n  //     res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({\r\n  //       message: 'Google Authentication Failed',\r\n  //       error: error.message,\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  // @Get('/oauth2callback')\r\n  // async handleOAuth2Callback(@Req() req, @Res() res) {\r\n  //   try {\r\n  //     const user = await this.authService.handleOAuthCallback(req.query.code);\r\n\r\n  //     return res.status(200).json({ user });\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //     return res.status(500).json({ error: 'Internal Server Error' });\r\n  //   }\r\n  // }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Get('encrypt-token')\r\n  @ApiOperation({ summary: 'Change Password' })\r\n  async encryptToken(): Promise<string> {\r\n    return this.authService.encryptToken();\r\n  }\r\n}\r\n"]}