{"version":3,"file":"auth.js","sourceRoot":"/","sources":["src/auth/auth.ts"],"names":[],"mappings":"","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { NullableType } from 'src/utils/types/nullable.type';\r\nimport { AuthEmailLoginDto } from './dtos/auth-email-login.dto';\r\nimport { AuthRegisterDto } from './dtos/auth-register.dto';\r\nimport { LoginResponseType } from './types/login-response.type';\r\nimport { JwtPayloadType } from './strategies/types/jwt-payload.type';\r\nimport { JwtRefreshPayloadType } from './strategies/types/jwt-refresh-payload.type';\r\nimport { User } from 'src/typeorm/entities/user.entity';\r\n\r\nexport interface IAuthService {\r\n  validateLogin(loginDto: AuthEmailLoginDto): Promise<LoginResponseType>;\r\n  registerUser(registerDto: AuthRegisterDto): Promise<void>;\r\n  // handleOAuthCallback(code: string): Promise<LoginResponseType>;\r\n  status(\r\n    userJwtPayload: JwtPayloadType,\r\n  ): Promise<\r\n    NullableType<User | { totalDeposits: number; totalWithdrawals: number }>\r\n  >;\r\n  confirmEmail(hash: string): Promise<void>;\r\n  forgotPassword(email: string): Promise<void>;\r\n  resetPassword(hash: string, password: string): Promise<void>;\r\n  refreshToken(\r\n    data: Pick<JwtRefreshPayloadType, 'sessionId'>,\r\n  ): Promise<Omit<LoginResponseType, 'user'>>;\r\n  encryptToken(): Promise<string>;\r\n  logout(data: Pick<JwtRefreshPayloadType, 'sessionId'>): any;\r\n}\r\n"]}