{"version":3,"file":"auth.service.js","sourceRoot":"/","sources":["src/auth/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport {\r\n  HttpException,\r\n  HttpStatus,\r\n  Inject,\r\n  Injectable,\r\n  UnauthorizedException,\r\n} from '@nestjs/common';\r\nimport { Services } from 'src/utils/constants';\r\nimport { AuthEmailLoginDto } from './dtos/auth-email-login.dto';\r\nimport { LoginResponseType } from './types/login-response.type';\r\nimport { AuthProvidersEnum } from './enums/auth-providers.enum';\r\nimport * as crypto from 'crypto';\r\nimport { ISessionService } from 'src/session/session';\r\nimport { Session } from 'src/session/entities/session.entity';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { AllConfigType } from 'src/config/config.type';\r\nimport ms, { StringValue } from 'ms';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { IAuthService } from './auth';\r\nimport { AuthRegisterDto } from './dtos/auth-register.dto';\r\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\r\nimport { compareHash, hashPassword } from 'src/utils/helpers';\r\nimport { JwtPayloadType } from './strategies/types/jwt-payload.type';\r\nimport { NullableType } from 'src/utils/types/nullable.type';\r\nimport { IForgotPasswordService } from 'src/forgot-password/forgot-password';\r\nimport { JwtRefreshPayloadType } from './strategies/types/jwt-refresh-payload.type';\r\nimport { User, UserStatus } from 'src/typeorm/entities/user.entity';\r\nimport { IUsersService } from 'src/users/users';\r\nimport { addHours } from 'date-fns';\r\nimport { EncryptService } from 'src/encrypt/encrypt.service';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport {\r\n  Category,\r\n  Transaction,\r\n  TrxStatus,\r\n} from '@app/typeorm/entities/transaction.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { Referral } from '@app/typeorm/entities/referral.entity';\r\n\r\n@Injectable()\r\nexport class AuthService implements IAuthService {\r\n  constructor(\r\n    @InjectRepository(Transaction)\r\n    private readonly trxRepository: Repository<Transaction>,\r\n    @InjectRepository(Referral)\r\n    private readonly refRepository: Repository<Referral>,\r\n    @Inject(Services.USERS) private readonly usersService: IUsersService,\r\n    @Inject(Services.SESSION) private readonly sessionService: ISessionService,\r\n    @Inject(Services.FORGOT_PASSWORD)\r\n    private readonly forgotPasswordService: IForgotPasswordService,\r\n    private readonly encryptService: EncryptService,\r\n    private readonly configService: ConfigService<AllConfigType>,\r\n    private readonly jwtService: JwtService,\r\n  ) {}\r\n\r\n  async validateLogin(loginDto: AuthEmailLoginDto): Promise<LoginResponseType> {\r\n    const user = await this.usersService.findOneUser({\r\n      email: loginDto.email,\r\n    });\r\n\r\n    if (!user) {\r\n      throw new HttpException(\r\n        {\r\n          status: HttpStatus.UNPROCESSABLE_ENTITY,\r\n          errors: {\r\n            email: 'notFound',\r\n          },\r\n        },\r\n        HttpStatus.UNPROCESSABLE_ENTITY,\r\n      );\r\n    }\r\n\r\n    if (user.provider !== AuthProvidersEnum.email) {\r\n      throw new HttpException(\r\n        {\r\n          status: HttpStatus.UNPROCESSABLE_ENTITY,\r\n          errors: {\r\n            email: `needLoginViaProvider:${user.provider}`,\r\n          },\r\n        },\r\n        HttpStatus.UNPROCESSABLE_ENTITY,\r\n      );\r\n    }\r\n\r\n    const isValidPassword = await compareHash(loginDto.password, user.password);\r\n\r\n    if (!isValidPassword) {\r\n      throw new HttpException(\r\n        {\r\n          status: HttpStatus.UNPROCESSABLE_ENTITY,\r\n          errors: {\r\n            password: 'incorrectPassword',\r\n          },\r\n        },\r\n        HttpStatus.UNPROCESSABLE_ENTITY,\r\n      );\r\n    }\r\n\r\n    const session = await this.sessionService.create({\r\n      user,\r\n    });\r\n\r\n    const { token, refreshToken, tokenExpires } = await this.getTokensData({\r\n      id: user.id,\r\n      sessionId: session.id,\r\n    });\r\n\r\n    return {\r\n      refreshToken,\r\n      token,\r\n      tokenExpires,\r\n      user,\r\n    };\r\n  }\r\n\r\n  // async handleOAuthCallback(code: string): Promise<LoginResponseType> {\r\n  //   try {\r\n  //     const tokenUrl = 'https://oauth2.googleapis.com/token';\r\n  //     const clientId = this.configService.getOrThrow<string>(\r\n  //       'google.extensionClientId',\r\n  //       {\r\n  //         infer: true,\r\n  //       },\r\n  //     );\r\n  //     const clientSecret = this.configService.getOrThrow<string>(\r\n  //       'google.clientExtensionSecret',\r\n  //       {\r\n  //         infer: true,\r\n  //       },\r\n  //     );\r\n  //     const redirectUri = this.configService.getOrThrow<string>(\r\n  //       'google.extensionRedirectURL',\r\n  //       {\r\n  //         infer: true,\r\n  //       },\r\n  //     );\r\n\r\n  //     const tokenResponse = await axios.post(tokenUrl, {\r\n  //       code,\r\n  //       client_id: clientId,\r\n  //       client_secret: clientSecret,\r\n  //       redirect_uri: redirectUri,\r\n  //       grant_type: 'authorization_code',\r\n  //     });\r\n\r\n  //     const { access_token } = tokenResponse.data;\r\n\r\n  //     const userInfo = await axios.get(\r\n  //       'https://www.googleapis.com/oauth2/v2/userinfo',\r\n  //       {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${access_token}`,\r\n  //         },\r\n  //       },\r\n  //     );\r\n\r\n  //     const profile = userInfo.data;\r\n\r\n  //     let user = await this.usersService.findOneUser({\r\n  //       // socialId: profile.id,\r\n  //       provider: AuthProvidersEnum.google,\r\n  //     });\r\n\r\n  //     if (!user) {\r\n  //       user = await this.usersService.createUser({\r\n  //         email: profile.email,\r\n  //         name: profile.name,\r\n  //         socialId: profile.id,\r\n  //         provider: AuthProvidersEnum.google,\r\n  //         status: UserStatus.Active,\r\n  //       });\r\n  //     }\r\n\r\n  //     const session = await this.sessionService.create({\r\n  //       user,\r\n  //     });\r\n\r\n  //     const { token, refreshToken, tokenExpires } = await this.getTokensData({\r\n  //       id: user.id,\r\n  //       sessionId: session.id,\r\n  //     });\r\n\r\n  //     return {\r\n  //       refreshToken,\r\n  //       token,\r\n  //       tokenExpires,\r\n  //       user,\r\n  //     };\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //     throw new HttpException(\r\n  //       'Failed to authenticate via Google',\r\n  //       HttpStatus.INTERNAL_SERVER_ERROR,\r\n  //     );\r\n  //   }\r\n  // }\r\n\r\n  async registerUser(registerDto: AuthRegisterDto): Promise<void> {\r\n    console.log('Register DTO:', registerDto);\r\n    const userExist = await this.usersService.findOneUser({\r\n      email: registerDto.email,\r\n    });\r\n    if (userExist)\r\n      throw new HttpException('Email already registered', HttpStatus.CONFLICT);\r\n\r\n    const hash = crypto\r\n      .createHash('sha256')\r\n      .update(randomStringGenerator())\r\n      .digest('hex');\r\n\r\n    const hashedPassword = await hashPassword(registerDto.password);\r\n\r\n    const activationExpiry = addHours(new Date(), 24);\r\n\r\n    console.log('Activation Expiry:', activationExpiry);\r\n\r\n    const newUser = await this.usersService.createUser({\r\n      ...registerDto,\r\n      password: hashedPassword,\r\n      email: registerDto.email,\r\n      status: UserStatus.Active,\r\n      hash,\r\n      referral_id: crypto.randomBytes(4).toString('hex'),\r\n    });\r\n\r\n    if (registerDto.referral_id) {\r\n      const owner = await this.usersService.findOneUser({\r\n        referral_id: registerDto.referral_id,\r\n      });\r\n\r\n      if (owner) {\r\n        const ref = this.refRepository.create({\r\n          profit: 10,\r\n          host: { id: newUser.id },\r\n          user: { id: owner.id },\r\n        });\r\n\r\n        owner.balance = Number(owner.balance) + 10;\r\n        this.usersService.saveUser(owner);\r\n        this.refRepository.save(ref);\r\n      }\r\n    }\r\n  }\r\n\r\n  async status(\r\n    userJwtPayload: JwtPayloadType,\r\n  ): Promise<\r\n    NullableType<User | { totalDeposits: number; totalWithdrawals: number }>\r\n  > {\r\n    const user = await this.usersService.findOneUser({\r\n      id: userJwtPayload.id,\r\n    });\r\n\r\n    const totalWithdrawals = (\r\n      await this.trxRepository.find({\r\n        where: {\r\n          user: { id: userJwtPayload.id },\r\n          category: Category.Withdrawal,\r\n          status: TrxStatus.Successful,\r\n        },\r\n      })\r\n    )\r\n      .map((itm) => itm.amount)\r\n      .reduce((a, b) => Number(a) + Number(b), 0);\r\n\r\n    const totalDeposits = (\r\n      await this.trxRepository.find({\r\n        where: {\r\n          user: { id: userJwtPayload.id },\r\n          category: Category.Deposit,\r\n          status: TrxStatus.Successful,\r\n        },\r\n      })\r\n    )\r\n      .map((itm) => itm.amount)\r\n      .reduce((a, b) => Number(a) + Number(b), 0);\r\n\r\n    const referralBonus = (\r\n      await this.refRepository.find({\r\n        where: { user: { id: userJwtPayload.id } },\r\n      })\r\n    )\r\n      .map((itm) => itm.profit)\r\n      .reduce((a, b) => Number(a) + Number(b), 0);\r\n\r\n    const newUser = { ...user, totalDeposits, totalWithdrawals, referralBonus };\r\n\r\n    return newUser;\r\n  }\r\n\r\n  async confirmEmail(hash: string): Promise<void> {\r\n    const user = await this.usersService.findOneUser({\r\n      hash,\r\n    });\r\n\r\n    if (!user) {\r\n      throw new HttpException(\r\n        {\r\n          status: HttpStatus.NOT_FOUND,\r\n          error: `notFound`,\r\n        },\r\n        HttpStatus.NOT_FOUND,\r\n      );\r\n    }\r\n\r\n    user.hash = null;\r\n    user.status = UserStatus.Active;\r\n    await this.usersService.saveUser(user);\r\n  }\r\n\r\n  async forgotPassword(email: string): Promise<void> {\r\n    const user = await this.usersService.findOneUser({\r\n      email,\r\n    });\r\n\r\n    if (!user) {\r\n      throw new HttpException(\r\n        {\r\n          status: HttpStatus.NOT_FOUND,\r\n          errors: {\r\n            email: 'emailNotExists',\r\n          },\r\n        },\r\n        HttpStatus.NOT_FOUND,\r\n      );\r\n    }\r\n\r\n    const hash = crypto\r\n      .createHash('sha256')\r\n      .update(randomStringGenerator())\r\n      .digest('hex');\r\n    await this.forgotPasswordService.create({\r\n      hash,\r\n      user,\r\n    });\r\n  }\r\n\r\n  async resetPassword(hash: string, password: string): Promise<void> {\r\n    const forgotReq = await this.forgotPasswordService.findOne({\r\n      where: {\r\n        hash,\r\n      },\r\n    });\r\n\r\n    if (!forgotReq) {\r\n      throw new HttpException(\r\n        {\r\n          status: HttpStatus.UNPROCESSABLE_ENTITY,\r\n          errors: {\r\n            hash: `notFound`,\r\n          },\r\n        },\r\n        HttpStatus.UNPROCESSABLE_ENTITY,\r\n      );\r\n    }\r\n\r\n    const user = forgotReq.user;\r\n    user.password = password;\r\n\r\n    await this.sessionService.softDelete({\r\n      user: {\r\n        id: user.id,\r\n      },\r\n    });\r\n    await this.usersService.saveUser(user);\r\n    await this.forgotPasswordService.softDelete(forgotReq.id);\r\n  }\r\n\r\n  async refreshToken(\r\n    data: Pick<JwtRefreshPayloadType, 'sessionId'>,\r\n  ): Promise<Omit<LoginResponseType, 'user'>> {\r\n    const session = await this.sessionService.findOne({\r\n      where: {\r\n        id: data.sessionId,\r\n      },\r\n    });\r\n\r\n    if (!session) {\r\n      throw new UnauthorizedException();\r\n    }\r\n\r\n    const { token, refreshToken, tokenExpires } = await this.getTokensData({\r\n      id: session.user.id,\r\n      sessionId: session.id,\r\n    });\r\n\r\n    return {\r\n      token,\r\n      refreshToken,\r\n      tokenExpires,\r\n    };\r\n  }\r\n\r\n  async logout(data: Pick<JwtRefreshPayloadType, 'sessionId'>) {\r\n    return this.sessionService.softDelete({\r\n      id: data.sessionId,\r\n    });\r\n  }\r\n\r\n  async encryptToken(): Promise<string> {\r\n    const text = JSON.stringify({\r\n      ttl: new Date().setSeconds(60),\r\n    });\r\n\r\n    const encryptedId = this.encryptService.encryptSingle(text);\r\n\r\n    return encryptedId;\r\n  }\r\n\r\n  private async getTokensData(data: {\r\n    id: User['id'];\r\n    sessionId: Session['id'];\r\n  }) {\r\n    const tokenExpiresIn = this.configService.getOrThrow<string>(\r\n      'auth.expires',\r\n      {\r\n        infer: true,\r\n      },\r\n    );\r\n\r\n    const tokenExpires = Date.now() + ms(tokenExpiresIn as StringValue);\r\n\r\n    const [token, refreshToken] = await Promise.all([\r\n      await this.jwtService.signAsync(\r\n        {\r\n          id: data.id,\r\n          sessionId: data.sessionId,\r\n        },\r\n        {\r\n          secret: this.configService.getOrThrow<string>('auth.secret', {\r\n            infer: true,\r\n          }),\r\n          expiresIn: tokenExpiresIn,\r\n        },\r\n      ),\r\n      await this.jwtService.signAsync(\r\n        {\r\n          sessionId: data.sessionId,\r\n        },\r\n        {\r\n          secret: this.configService.getOrThrow<string>('auth.refreshSecret', {\r\n            infer: true,\r\n          }),\r\n          expiresIn: this.configService.getOrThrow<string>(\r\n            'auth.refreshExpires',\r\n            {\r\n              infer: true,\r\n            },\r\n          ),\r\n        },\r\n      ),\r\n    ]);\r\n\r\n    return {\r\n      token,\r\n      refreshToken,\r\n      tokenExpires,\r\n    };\r\n  }\r\n}\r\n"]}