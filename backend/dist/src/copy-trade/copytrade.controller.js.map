{"version":3,"file":"copytrade.controller.js","sourceRoot":"/","sources":["src/copy-trade/copytrade.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,2CAUwB;AACxB,6CAAqE;AACrE,kDAA6C;AAC7C,+CAA6C;AAC7C,qDAAkD;AAElD,2DAAuD;AAIhD,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAC9B,YAA6B,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAG,CAAC;IAU7D,AAAN,KAAK,CAAC,aAAa,CACW,YAA0B,EAC/C,GAAQ;QAEf,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACnE,CAAC;IASK,AAAN,KAAK,CAAC,gBAAgB,CAAQ,GAAQ;QACpC,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACzD,CAAC;CACF,CAAA;AA9BY,kDAAmB;AAWxB;IARL,IAAA,kBAAS,EAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IAC3B,IAAA,aAAI,EAAC,WAAW,CAAC;IACjB,IAAA,iBAAQ,EAAC,mBAAU,CAAC,UAAU,CAAC;IAC/B,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;IAC3C,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,8BAA8B;KAC5C,CAAC;IAEC,WAAA,IAAA,aAAI,EAAC,IAAI,uBAAc,EAAE,CAAC,CAAA;IAC1B,WAAA,IAAA,YAAG,GAAE,CAAA;;qCADoC,2BAAY;;wDAKvD;AASK;IAPL,IAAA,kBAAS,EAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IAC3B,IAAA,YAAG,GAAE;IACL,IAAA,iBAAQ,EAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,6BAA6B;KAC3C,CAAC;IACsB,WAAA,IAAA,YAAG,GAAE,CAAA;;;;2DAG5B;8BA7BU,mBAAmB;IAF/B,IAAA,iBAAO,EAAC,WAAW,CAAC;IACpB,IAAA,mBAAU,EAAC,kBAAM,CAAC,SAAS,CAAC;qCAEoB,oCAAgB;GADpD,mBAAmB,CA8B/B","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Post,\r\n  Req,\r\n  UseGuards,\r\n  ValidationPipe,\r\n} from '@nestjs/common';\r\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\r\nimport { Routes } from 'src/utils/constants';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { CopyTradeDto } from './dto/copyTradeDto';\r\nimport { CopyTrade } from '@app/typeorm/entities/copy.trade.entity';\r\nimport { CopyTradeService } from './copytrade.service';\r\n\r\n@ApiTags('CopyTrade')\r\n@Controller(Routes.CopyTrade)\r\nexport class CopyTradeController {\r\n  constructor(private readonly copyTradeService: CopyTradeService) {}\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Post('subscribe')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'Subscribe user' })\r\n  @ApiResponse({\r\n    status: 204,\r\n    description: 'User subscribed successfully',\r\n  })\r\n  async subscribeUser(\r\n    @Body(new ValidationPipe()) copyTradeDto: CopyTradeDto,\r\n    @Req() req: any,\r\n  ): Promise<CopyTradeDto> {\r\n    const userId = req.user.id;\r\n    return this.copyTradeService.subscribeUser(userId, copyTradeDto);\r\n  }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Get()\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Trades fetched successfully',\r\n  })\r\n  async changeUserStatus(@Req() req: any): Promise<CopyTrade[]> {\r\n    const userId = req.user.id;\r\n    return this.copyTradeService.getSubscribedUser(userId);\r\n  }\r\n}\r\n"]}