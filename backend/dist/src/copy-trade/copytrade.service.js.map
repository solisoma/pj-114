{"version":3,"file":"copytrade.service.js","sourceRoot":"/","sources":["src/copy-trade/copytrade.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { Repository } from 'typeorm';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Category, TrxStatus } from '@app/typeorm/entities/transaction.entity';\r\nimport { TransactionService } from '@app/transaction/transaction.service';\r\nimport { User } from '@app/typeorm/entities/user.entity';\r\nimport { CopyTradeDto } from './dto/copyTradeDto';\r\nimport { CopyTrade } from '@app/typeorm/entities/copy.trade.entity';\r\nimport { ICopyTradeService } from './copytrade';\r\n\r\n@Injectable()\r\nexport class CopyTradeService implements ICopyTradeService {\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private readonly usersRepository: Repository<User>,\r\n    @InjectRepository(CopyTrade)\r\n    private readonly copyTradeRepository: Repository<CopyTrade>,\r\n    private readonly trxService: TransactionService,\r\n    // @Inject(Services.MAILS) private readonly mailsService: IMailsService,\r\n  ) {}\r\n\r\n  async subscribeUser(\r\n    id: number,\r\n    copyTradeDto: CopyTradeDto,\r\n  ): Promise<CopyTrade> {\r\n    const existingUser = await this.usersRepository.findOne({\r\n      where: { id },\r\n    });\r\n\r\n    if (!existingUser)\r\n      throw new HttpException(\"User doesn't exists\", HttpStatus.CONFLICT);\r\n\r\n    if (existingUser.copytrade_balance < copyTradeDto.amount)\r\n      throw new HttpException('Insufficient balance', HttpStatus.CONFLICT);\r\n\r\n    existingUser.copytrade_balance -= copyTradeDto.amount;\r\n\r\n    const copy = this.copyTradeRepository.create({\r\n      ...copyTradeDto,\r\n      user: { id },\r\n    });\r\n\r\n    await this.usersRepository.save(existingUser);\r\n    const complete = await this.copyTradeRepository.save(copy);\r\n    await this.trxService.createTrx(id, {\r\n      service: 'Invested in copy trade',\r\n      category: Category.CopyTrade,\r\n      amount: copyTradeDto.amount,\r\n      status: TrxStatus.Successful,\r\n    });\r\n\r\n    return complete;\r\n  }\r\n\r\n  async getSubscribedUser(id: number): Promise<CopyTrade[]> {\r\n    const users_copytrade = await this.copyTradeRepository.find({\r\n      where: { user: { id }, expired: false },\r\n    });\r\n\r\n    const user = await this.usersRepository.findOne({ where: { id } });\r\n\r\n    const validateEach = users_copytrade.filter(async (contract) => {\r\n      // If less than 30 mins dont calculate\r\n      if (Date.now() - new Date(contract.last_update).getTime() < 1800000)\r\n        return true;\r\n\r\n      const created_on = new Date(contract.created_at);\r\n      const { roi } = contract;\r\n\r\n      if (\r\n        Date.now() >\r\n        new Date(\r\n          created_on.setDate(created_on.getDate() + contract.duration),\r\n        ).getTime()\r\n      ) {\r\n        const shuffle = [roi, roi * 1.534, roi * 2.0073, roi * 2.5344];\r\n        const main_roi = shuffle[Math.floor(Math.random() * shuffle.length)];\r\n        contract.pnl = Number(\r\n          ((Number(contract.amount) * main_roi) / 100).toFixed(4),\r\n        );\r\n        contract.expired = true;\r\n        user.copytrade_balance += Number(contract.amount) + contract.pnl;\r\n\r\n        await this.copyTradeRepository.save(contract);\r\n        await this.usersRepository.save(user);\r\n        await this.trxService.createTrx(id, {\r\n          service: 'move PnL to copy trade account',\r\n          amount: contract.pnl,\r\n          category: Category.CopyTrade,\r\n          status: TrxStatus.Successful,\r\n        });\r\n\r\n        return false;\r\n      } else {\r\n        const shuffle = [\r\n          roi * -1.534,\r\n          roi * -2.0073,\r\n          roi * -2.5344,\r\n          roi,\r\n          roi * 1.534,\r\n          roi * 2.0073,\r\n          roi * 2.5344,\r\n        ];\r\n        const main_roi = shuffle[Math.floor(Math.random() * shuffle.length)];\r\n        contract.pnl = Number(\r\n          ((Number(contract.amount) * main_roi) / 100).toFixed(4),\r\n        );\r\n        await this.copyTradeRepository.save(contract);\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return validateEach;\r\n  }\r\n}\r\n"]}