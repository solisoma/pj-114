{"version":3,"file":"typeorm-config.service.js","sourceRoot":"/","sources":["src/database/typeorm-config.service.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2CAA4C;AAC5C,2CAA+C;AAKxC,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,YAAoB,aAA2C;QAA3C,kBAAa,GAAb,aAAa,CAA8B;IAAG,CAAC;IAEnE,oBAAoB;QAClB,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;YACtE,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;YACpE,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;YACtE,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;YACtE,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,mBAAmB,EAAE;gBAC5D,KAAK,EAAE,IAAI;aACZ,CAAC;YACF,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,mBAAmB,EAAE;gBAC5D,KAAK,EAAE,IAAI;aACZ,CAAC;YACF,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,eAAe,EAAE;gBACxD,KAAK,EAAE,IAAI;aACZ,CAAC;YACF,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAU,sBAAsB,EAAE;gBACnE,KAAK,EAAE,IAAI;aACZ,CAAC;YACF,UAAU,EAAE,KAAK;YACjB,mBAAmB,EAAE,IAAI;YACzB,OAAO,EACL,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,aAAa,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;gBAC9D,YAAY;YACd,QAAQ,EAAE,CAAC,SAAS,GAAG,0BAA0B,CAAC;SAC3B,CAAC;IAC5B,CAAC;CACF,CAAA;AA7BY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;qCAEwB,sBAAa;GADrC,oBAAoB,CA6BhC","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { TypeOrmModuleOptions, TypeOrmOptionsFactory } from '@nestjs/typeorm';\r\nimport { AllConfigType } from 'src/config/config.type';\r\n\r\n@Injectable()\r\nexport class TypeOrmConfigService implements TypeOrmOptionsFactory {\r\n  constructor(private configService: ConfigService<AllConfigType>) {}\r\n\r\n  createTypeOrmOptions(): TypeOrmModuleOptions {\r\n    return {\r\n      type: this.configService.get<string>('database.type', { infer: true }),\r\n      url: this.configService.get<string>('database.url', { infer: true }),\r\n      host: this.configService.get<string>('database.host', { infer: true }),\r\n      port: this.configService.get<number>('database.port', { infer: true }),\r\n      username: this.configService.get<string>('database.username', {\r\n        infer: true,\r\n      }),\r\n      password: this.configService.get<string>('database.password', {\r\n        infer: true,\r\n      }),\r\n      database: this.configService.get<string>('database.name', {\r\n        infer: true,\r\n      }),\r\n      synchronize: this.configService.get<boolean>('database.synchronize', {\r\n        infer: true,\r\n      }),\r\n      dropSchema: false,\r\n      keepConnectionAlive: true,\r\n      logging:\r\n        this.configService.get<string>('app.nodeEnv', { infer: true }) !==\r\n        'production',\r\n      entities: [__dirname + '/../**/*.entity{.ts,.js}'],\r\n    } as TypeOrmModuleOptions;\r\n  }\r\n}\r\n"]}