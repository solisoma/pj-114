{"version":3,"file":"encrypt.service.js","sourceRoot":"/","sources":["src/encrypt/encrypt.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,2CAA+C;AAE/C,2CAA4C;AAC5C,+CAAiC;AAG1B,IAAM,cAAc,GAApB,MAAM,cAAc;IAKzB,YAA6B,aAA2C;QAA3C,kBAAa,GAAb,aAAa,CAA8B;QACtE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,iBAAiB,EAAE;YAClE,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;QACH,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,SAAS,EAAE;YAClD,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,gBAAgB,EAAE;YAChE,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;IACL,CAAC;IAED,aAAa,CAAC,IAAY;QACxB,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAClC,IAAI,CAAC,SAAS,EACd,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,EACnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAC5B,CAAC;QAEF,IAAI,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QACrD,WAAW,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEnC,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,YAAY,CAAC,SAAmB;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1C,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;QAC3B,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,aAAa,CAAC,GAAW;QACvB,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CACtC,IAAI,CAAC,SAAS,EACd,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,EACnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAC5B,CAAC;QAEF,IAAI,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACtD,WAAW,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEtC,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,YAAY,CAAC,QAAkB;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,QAAQ,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;QAC1B,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF,CAAA;AA1DY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;qCAMiC,sBAAa;GAL9C,cAAc,CA0D1B","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { AllConfigType } from 'src/config/config.type';\r\nimport { Injectable } from '@nestjs/common';\r\nimport * as crypto from 'crypto';\r\n\r\n@Injectable()\r\nexport class EncryptService {\r\n  encryptKey: string;\r\n  iv: string;\r\n  algorithm: string;\r\n\r\n  constructor(private readonly configService: ConfigService<AllConfigType>) {\r\n    this.encryptKey = this.configService.get<string>('auth.encryptKey', {\r\n      infer: true,\r\n    });\r\n    this.iv = this.configService.get<string>('auth.iv', {\r\n      infer: true,\r\n    });\r\n    this.algorithm = this.configService.get<string>('auth.algorithm', {\r\n      infer: true,\r\n    });\r\n  }\r\n\r\n  encryptSingle(text: string): string {\r\n    const cipher = crypto.createCipheriv(\r\n      this.algorithm,\r\n      Buffer.from(this.encryptKey, 'hex'),\r\n      Buffer.from(this.iv, 'hex'),\r\n    );\r\n\r\n    let encryptedId = cipher.update(text, 'utf8', 'hex');\r\n    encryptedId += cipher.final('hex');\r\n\r\n    return encryptedId;\r\n  }\r\n\r\n  encryptMulti(textArray: string[]): string[] {\r\n    for (let i = 0; i < textArray.length; i++) {\r\n      const encrypted = this.encryptSingle(textArray[i]);\r\n      textArray[i] = encrypted;\r\n    }\r\n    return textArray;\r\n  }\r\n\r\n  decryptSingle(hex: string): string {\r\n    const decipher = crypto.createDecipheriv(\r\n      this.algorithm,\r\n      Buffer.from(this.encryptKey, 'hex'),\r\n      Buffer.from(this.iv, 'hex'),\r\n    );\r\n\r\n    let decryptedId = decipher.update(hex, 'hex', 'utf8');\r\n    decryptedId += decipher.final('utf8');\r\n\r\n    return decryptedId;\r\n  }\r\n\r\n  decryptMulti(hexArray: string[]): string[] {\r\n    for (let i = 0; i < hexArray.length; i++) {\r\n      const decrypted = this.decryptSingle(hexArray[i]);\r\n      hexArray[i] = decrypted;\r\n    }\r\n    return hexArray;\r\n  }\r\n}\r\n"]}