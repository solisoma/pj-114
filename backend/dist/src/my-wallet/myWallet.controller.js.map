{"version":3,"file":"myWallet.controller.js","sourceRoot":"/","sources":["src/my-wallet/myWallet.controller.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  Req,\r\n  Res,\r\n  UseGuards,\r\n  ValidationPipe,\r\n} from '@nestjs/common';\r\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\r\nimport { Routes } from 'src/utils/constants';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { WalletService } from './myWallet.service';\r\nimport {\r\n  CreateWalletDto,\r\n  GetWalletDto,\r\n  UpdateWalletDto,\r\n} from './dto/myWalletDto';\r\nimport { MyWallet } from '@app/typeorm/entities/wallet.entity';\r\nimport { UploadService } from '@app/upload/upload.service';\r\n\r\n@ApiTags('My Wallet')\r\n@Controller(Routes.MyWallet)\r\nexport class WalletController {\r\n  constructor(\r\n    private readonly walletService: WalletService,\r\n    private readonly uploadService: UploadService,\r\n  ) {}\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Post()\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'create wallet' })\r\n  @ApiResponse({\r\n    status: 204,\r\n    description: 'User subscribed successfully',\r\n  })\r\n  async createUser(\r\n    @Body(new ValidationPipe()) createWalletDto: CreateWalletDto,\r\n    @Req() req: any,\r\n    @Res() res: any,\r\n  ): Promise<MyWallet> {\r\n    await this.uploadService.getUploadMiddleware(\r\n      './src/public/qrcode',\r\n      [\r\n        { name: 'qrcode', maxCount: 1 }, // Handle 'front'\r\n      ],\r\n      ['png', 'jpeg', 'pdf'],\r\n    )(req, res);\r\n\r\n    const { id } = req.user;\r\n\r\n    createWalletDto = {\r\n      ...req.body,\r\n      qrcode: req.files?.qrcode ? req.files.qrcode[0].path : '', // Handle 'front'\r\n    };\r\n\r\n    return res\r\n      .status(200)\r\n      .json(await this.walletService.createWallet(id, createWalletDto));\r\n  }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Get()\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'wallets fetched successfully',\r\n  })\r\n  async getWallet(\r\n    @Query(new ValidationPipe()) param: GetWalletDto,\r\n  ): Promise<MyWallet> {\r\n    return this.walletService.getWallet(param.name);\r\n  }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Get('all')\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'wallets fetched successfully',\r\n  })\r\n  async getAllWallet(): Promise<MyWallet[]> {\r\n    return this.walletService.getAllWallet();\r\n  }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Put()\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'wallets updated successfully',\r\n  })\r\n  async updateWallet(\r\n    @Body(new ValidationPipe()) updateWallet: UpdateWalletDto,\r\n    @Req() req: any,\r\n    @Res() res: any,\r\n  ): Promise<MyWallet> {\r\n    await this.uploadService.getUploadMiddleware(\r\n      './src/public/qrcode',\r\n      [\r\n        { name: 'qrcode', maxCount: 1 }, // Handle 'front'\r\n      ],\r\n      ['png', 'jpeg', 'pdf'],\r\n    )(req, res);\r\n\r\n    const { id } = req.user;\r\n\r\n    updateWallet = {\r\n      ...req.body,\r\n      qrcode: req.files?.qrcode ? req.files.qrcode[0].path : '', // Handle 'front'\r\n    };\r\n    return res\r\n      .status(200)\r\n      .json(await this.walletService.updateWallet(id, updateWallet));\r\n  }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Delete(':id')\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'wallets deleted successfully',\r\n  })\r\n  async deleteWallet(\r\n    @Param('id') id: number,\r\n    @Req() req: any,\r\n  ): Promise<{ id: number; deleted: boolean }> {\r\n    const { d: userId } = req.user;\r\n    return this.walletService.deleteWallet(userId, id);\r\n  }\r\n}\r\n"]}