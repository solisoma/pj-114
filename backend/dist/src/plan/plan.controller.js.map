{"version":3,"file":"plan.controller.js","sourceRoot":"/","sources":["src/plan/plan.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,2CAUwB;AACxB,6CAAqE;AACrE,kDAA6C;AAC7C,+CAA6C;AAC7C,2CAAwC;AAExC,iDAA6C;AAItC,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAA6B,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAUnD,AAAN,KAAK,CAAC,aAAa,CACW,OAAgB,EACrC,GAAQ;QAEf,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IASK,AAAN,KAAK,CAAC,gBAAgB,CAAQ,GAAQ;QACpC,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACpD,CAAC;CACF,CAAA;AA9BY,wCAAc;AAWnB;IARL,IAAA,kBAAS,EAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IAC3B,IAAA,aAAI,EAAC,WAAW,CAAC;IACjB,IAAA,iBAAQ,EAAC,mBAAU,CAAC,UAAU,CAAC;IAC/B,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;IAC3C,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,8BAA8B;KAC5C,CAAC;IAEC,WAAA,IAAA,aAAI,EAAC,IAAI,uBAAc,EAAE,CAAC,CAAA;IAC1B,WAAA,IAAA,YAAG,GAAE,CAAA;;qCAD+B,iBAAO;;mDAK7C;AASK;IAPL,IAAA,kBAAS,EAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IAC3B,IAAA,YAAG,GAAE;IACL,IAAA,iBAAQ,EAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,6BAA6B;KAC3C,CAAC;IACsB,WAAA,IAAA,YAAG,GAAE,CAAA;;;;sDAG5B;yBA7BU,cAAc;IAF1B,IAAA,iBAAO,EAAC,WAAW,CAAC;IACpB,IAAA,mBAAU,EAAC,kBAAM,CAAC,IAAI,CAAC;qCAEoB,0BAAW;GAD1C,cAAc,CA8B1B","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Post,\r\n  Req,\r\n  UseGuards,\r\n  ValidationPipe,\r\n} from '@nestjs/common';\r\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\r\nimport { Routes } from 'src/utils/constants';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { PlanDto } from './dto/PlanDto';\r\nimport { Plan } from '@app/typeorm/entities/plan.entity';\r\nimport { PlanService } from './plan.service';\r\n\r\n@ApiTags('CopyTrade')\r\n@Controller(Routes.Plan)\r\nexport class PlanController {\r\n  constructor(private readonly planService: PlanService) {}\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Post('subscribe')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'Subscribe user' })\r\n  @ApiResponse({\r\n    status: 204,\r\n    description: 'User subscribed successfully',\r\n  })\r\n  async subscribeUser(\r\n    @Body(new ValidationPipe()) planDto: PlanDto,\r\n    @Req() req: any,\r\n  ): Promise<Plan> {\r\n    const userId = req.user.id;\r\n    return this.planService.subscribeUser(userId, planDto);\r\n  }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Get()\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Trades fetched successfully',\r\n  })\r\n  async changeUserStatus(@Req() req: any): Promise<Plan[]> {\r\n    const userId = req.user.id;\r\n    return this.planService.getSubscribedUser(userId);\r\n  }\r\n}\r\n"]}