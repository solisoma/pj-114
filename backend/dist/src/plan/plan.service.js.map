{"version":3,"file":"plan.service.js","sourceRoot":"/","sources":["src/plan/plan.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { Repository } from 'typeorm';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Category, TrxStatus } from '@app/typeorm/entities/transaction.entity';\r\nimport { TransactionService } from '@app/transaction/transaction.service';\r\nimport { User } from '@app/typeorm/entities/user.entity';\r\nimport { Plan } from '@app/typeorm/entities/plan.entity';\r\nimport { PlanDto } from './dto/PlanDto';\r\nimport { IPlanService } from './plan';\r\n\r\n@Injectable()\r\nexport class PlanService implements IPlanService {\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private readonly usersRepository: Repository<User>,\r\n    @InjectRepository(Plan)\r\n    private readonly planRepository: Repository<Plan>,\r\n    private readonly trxService: TransactionService,\r\n    // @Inject(Services.MAILS) private readonly mailsService: IMailsService,\r\n  ) {}\r\n\r\n  async subscribeUser(id: number, planDto: PlanDto): Promise<Plan> {\r\n    const existingUser = await this.usersRepository.findOne({\r\n      where: { id },\r\n    });\r\n\r\n    if (!existingUser)\r\n      throw new HttpException(\"User doesn't exists\", HttpStatus.CONFLICT);\r\n\r\n    if (existingUser.plan_balance < planDto.amount)\r\n      throw new HttpException('Insufficient balance', HttpStatus.CONFLICT);\r\n\r\n    existingUser.plan_balance -= planDto.amount;\r\n\r\n    const plan = this.planRepository.create({\r\n      ...planDto,\r\n      user: { id },\r\n    });\r\n\r\n    await this.usersRepository.save(existingUser);\r\n    const complete = await this.planRepository.save(plan);\r\n    await this.trxService.createTrx(id, {\r\n      service: 'Invested in plans',\r\n      category: Category.Plan,\r\n      amount: planDto.amount,\r\n      status: TrxStatus.Successful,\r\n    });\r\n\r\n    return complete;\r\n  }\r\n\r\n  async getSubscribedUser(id: number): Promise<Plan[]> {\r\n    const users_plan = await this.planRepository.find({\r\n      where: { user: { id }, expired: false },\r\n      order:{created_at:'DESC'}\r\n    });\r\n\r\n    const user = await this.usersRepository.findOne({ where: { id } });\r\n\r\n    const validateEach = users_plan.filter(async (contract) => {\r\n      const created_on = new Date(contract.created_at);\r\n      const { roi } = contract;\r\n\r\n      if (\r\n        Date.now() >\r\n        new Date(\r\n          created_on.setDate(created_on.getDate() + contract.duration),\r\n        ).getTime()\r\n      ) {\r\n        const pnl = contract.amount + (contract.amount * roi) / 100;\r\n        contract.expired = true;\r\n        user.plan_balance += pnl;\r\n\r\n        await this.planRepository.save(contract);\r\n        await this.usersRepository.save(user);\r\n        await this.trxService.createTrx(id, {\r\n          service: 'move PnL to plan account',\r\n          amount: pnl,\r\n          category: Category.Plan,\r\n          status: TrxStatus.Successful,\r\n        });\r\n\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    return validateEach;\r\n  }\r\n}\r\n"]}