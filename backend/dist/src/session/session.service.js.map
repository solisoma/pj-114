{"version":3,"file":"session.service.js","sourceRoot":"/","sources":["src/session/session.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,2CAA4C;AAC5C,6CAAmD;AACnD,qCAAuD;AACvD,8DAAoD;AAO7C,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAEmB,iBAAsC;QAAtC,sBAAiB,GAAjB,iBAAiB,CAAqB;IACtD,CAAC;IACJ,KAAK,CAAC,OAAO,CAAC,OAA6B;QACzC,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACpC,KAAK,EAAE,OAAO,CAAC,KAAK;SACrB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,OAA6B;QAC1C,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;YACjC,KAAK,EAAE,OAAO,CAAC,KAAK;SACrB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAA0B;QACrC,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EACf,SAAS,EACT,GAAG,QAAQ,EAKZ;QACC,MAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC;YACtC,GAAG,QAAQ;YACX,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAA,aAAG,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;SACvE,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAnCY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,wBAAO,CAAC,CAAA;qCACU,oBAAU;GAHrC,cAAc,CAmC1B","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { DeepPartial, Not, Repository } from 'typeorm';\r\nimport { Session } from './entities/session.entity';\r\nimport { FindOptions } from 'src/utils/types/find-options.type';\r\nimport { NullableType } from 'src/utils/types/nullable.type';\r\nimport { ISessionService } from './session';\r\nimport { User } from 'src/typeorm/entities/user.entity';\r\n\r\n@Injectable()\r\nexport class SessionService implements ISessionService {\r\n  constructor(\r\n    @InjectRepository(Session)\r\n    private readonly sessionRepository: Repository<Session>,\r\n  ) {}\r\n  async findOne(options: FindOptions<Session>): Promise<NullableType<Session>> {\r\n    return this.sessionRepository.findOne({\r\n      where: options.where,\r\n    });\r\n  }\r\n\r\n  async findMany(options: FindOptions<Session>): Promise<Session[]> {\r\n    return this.sessionRepository.find({\r\n      where: options.where,\r\n    });\r\n  }\r\n\r\n  async create(data: DeepPartial<Session>): Promise<Session> {\r\n    const session = this.sessionRepository.create(data);\r\n    return this.sessionRepository.save(session);\r\n  }\r\n\r\n  async softDelete({\r\n    excludeId,\r\n    ...criteria\r\n  }: {\r\n    id?: Session['id'];\r\n    user?: Pick<User, 'id'>;\r\n    excludeId?: Session['id'];\r\n  }): Promise<void> {\r\n    await this.sessionRepository.softDelete({\r\n      ...criteria,\r\n      id: criteria.id ? criteria.id : excludeId ? Not(excludeId) : undefined,\r\n    });\r\n  }\r\n}\r\n"]}