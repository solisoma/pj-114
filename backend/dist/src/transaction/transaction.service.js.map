{"version":3,"file":"transaction.service.js","sourceRoot":"/","sources":["src/transaction/transaction.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,2CAAuE;AACvE,6CAAmD;AACnD,qCAAqC;AACrC,iEAAyD;AAEzD,+EAAuE;AAGhE,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YAEmB,aAAsC,EAEtC,eAAiC;QAFjC,kBAAa,GAAb,aAAa,CAAyB;QAEtC,oBAAe,GAAf,eAAe,CAAkB;IACjD,CAAC;IAEJ,KAAK,CAAC,SAAS,CACb,EAAU,EACV,YAA0B;QAE1B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACtD,KAAK,EAAE,EAAE,EAAE,EAAE;SACd,CAAC,CAAC;QACH,IAAI,CAAC,YAAY;YACf,MAAM,IAAI,sBAAa,CAAC,qBAAqB,EAAE,mBAAU,CAAC,QAAQ,CAAC,CAAC;QAEtE,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,GAAG,YAAY,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,SAAS,CACb,EAAU,EACV,YAA0B;QAG1B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;YACnD,KAAK,EAAE,EAAE,EAAE,EAAE;SACd,CAAC,CAAC;QACH,IAAI,CAAC,WAAW;YACd,MAAM,IAAI,sBAAa,CACrB,4BAA4B,EAC5B,mBAAU,CAAC,QAAQ,CACpB,CAAC;QAEJ,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;QAClD,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;YACtC,KAAK,EAAE,EAAE,EAAE,EAAE;SACd,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAzCY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,gCAAW,CAAC,CAAA;IAE7B,WAAA,IAAA,0BAAgB,EAAC,kBAAI,CAAC,CAAA;qCADS,oBAAU;QAER,oBAAU;GALnC,kBAAkB,CAyC9B","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { User } from '@app/typeorm/entities/user.entity';\r\nimport { CreateTrxDto, UpdateTrxDto } from './dto/transactionDto';\r\nimport { Transaction } from '@app/typeorm/entities/transaction.entity';\r\n\r\n@Injectable()\r\nexport class TransactionService {\r\n  constructor(\r\n    @InjectRepository(Transaction)\r\n    private readonly trxRepository: Repository<Transaction>,\r\n    @InjectRepository(User)\r\n    private readonly usersRepository: Repository<User>,\r\n  ) {}\r\n\r\n  async createTrx(\r\n    id: number,\r\n    createTrxDto: CreateTrxDto,\r\n  ): Promise<Transaction> {\r\n    const existingUser = await this.usersRepository.findOne({\r\n      where: { id },\r\n    });\r\n    if (!existingUser)\r\n      throw new HttpException(\"User doesn't exists\", HttpStatus.CONFLICT);\r\n\r\n    const trx = this.trxRepository.create({ ...createTrxDto, user: { id } });\r\n    return this.trxRepository.save(trx);\r\n  }\r\n\r\n  async updateTrx(\r\n    id: number,\r\n    updateTrxDto: UpdateTrxDto,\r\n  ): Promise<Transaction> {\r\n    // check if it exists\r\n    const existingTrx = await this.trxRepository.findOne({\r\n      where: { id },\r\n    });\r\n    if (!existingTrx)\r\n      throw new HttpException(\r\n        \"Transaction doesn't exists\",\r\n        HttpStatus.CONFLICT,\r\n      );\r\n\r\n    await this.trxRepository.update(id, updateTrxDto);\r\n    return await this.trxRepository.findOne({\r\n      where: { id },\r\n    });\r\n  }\r\n}\r\n"]}