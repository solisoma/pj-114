{"version":3,"file":"user.entity.js","sourceRoot":"/","sources":["src/typeorm/entities/user.entity.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { hashPassword } from 'src/utils/helpers';\r\nimport { Exclude } from 'class-transformer';\r\nimport { Length } from 'class-validator';\r\nimport {\r\n  Entity,\r\n  Column,\r\n  PrimaryGeneratedColumn,\r\n  AfterLoad,\r\n  BeforeInsert,\r\n  BeforeUpdate,\r\n  Index,\r\n  CreateDateColumn,\r\n  UpdateDateColumn,\r\n  DeleteDateColumn,\r\n  OneToMany,\r\n} from 'typeorm';\r\nimport { AuthProvidersEnum } from 'src/auth/enums/auth-providers.enum';\r\nimport { Transaction } from './transaction.entity';\r\nimport { CopyTrade } from './copy.trade.entity';\r\nimport { Plan } from './plan.entity';\r\nimport { CryptoWallet } from './bank.account.entity';\r\n\r\nexport enum UserStatus {\r\n  Active = 'active',\r\n  Inactive = 'inactive',\r\n}\r\n\r\nexport enum Gender {\r\n  Male = 'male',\r\n  Female = 'female',\r\n  Other = 'other',\r\n}\r\n\r\nexport enum Country {\r\n  Afghanistan = 'Afghanistan',\r\n  Albania = 'Albania',\r\n  Algeria = 'Algeria',\r\n  Andorra = 'Andorra',\r\n  Angola = 'Angola',\r\n  AntiguaAndBarbuda = 'Antigua and Barbuda',\r\n  Argentina = 'Argentina',\r\n  Armenia = 'Armenia',\r\n  Australia = 'Australia',\r\n  Austria = 'Austria',\r\n  Azerbaijan = 'Azerbaijan',\r\n  Bahamas = 'Bahamas',\r\n  Bahrain = 'Bahrain',\r\n  Bangladesh = 'Bangladesh',\r\n  Barbados = 'Barbados',\r\n  Belarus = 'Belarus',\r\n  Belgium = 'Belgium',\r\n  Belize = 'Belize',\r\n  Benin = 'Benin',\r\n  Bhutan = 'Bhutan',\r\n  Bolivia = 'Bolivia',\r\n  BosniaAndHerzegovina = 'Bosnia and Herzegovina',\r\n  Botswana = 'Botswana',\r\n  Brazil = 'Brazil',\r\n  Brunei = 'Brunei',\r\n  Bulgaria = 'Bulgaria',\r\n  BurkinaFaso = 'Burkina Faso',\r\n  Burundi = 'Burundi',\r\n  Cambodia = 'Cambodia',\r\n  Cameroon = 'Cameroon',\r\n  Canada = 'Canada',\r\n  CapeVerde = 'Cape Verde',\r\n  CentralAfricanRepublic = 'Central African Republic',\r\n  Chad = 'Chad',\r\n  Chile = 'Chile',\r\n  China = 'China',\r\n  Colombia = 'Colombia',\r\n  Comoros = 'Comoros',\r\n  CongoDR = 'Congo (DR)',\r\n  CostaRica = 'Costa Rica',\r\n  Croatia = 'Croatia',\r\n  Cuba = 'Cuba',\r\n  Cyprus = 'Cyprus',\r\n  CzechRepublic = 'Czech Republic',\r\n  Denmark = 'Denmark',\r\n  Djibouti = 'Djibouti',\r\n  Dominica = 'Dominica',\r\n  DominicanRepublic = 'Dominican Republic',\r\n  EastTimor = 'East Timor',\r\n  Ecuador = 'Ecuador',\r\n  Egypt = 'Egypt',\r\n  ElSalvador = 'El Salvador',\r\n  EquatorialGuinea = 'Equatorial Guinea',\r\n  Eritrea = 'Eritrea',\r\n  Estonia = 'Estonia',\r\n  Eswatini = 'Eswatini',\r\n  Ethiopia = 'Ethiopia',\r\n  Fiji = 'Fiji',\r\n  Finland = 'Finland',\r\n  France = 'France',\r\n  Gabon = 'Gabon',\r\n  Gambia = 'Gambia',\r\n  Georgia = 'Georgia',\r\n  Germany = 'Germany',\r\n  Ghana = 'Ghana',\r\n  Greece = 'Greece',\r\n  Grenada = 'Grenada',\r\n  Guatemala = 'Guatemala',\r\n  Guinea = 'Guinea',\r\n  GuineaBissau = 'Guinea-Bissau',\r\n  Guyana = 'Guyana',\r\n  Haiti = 'Haiti',\r\n  Honduras = 'Honduras',\r\n  Hungary = 'Hungary',\r\n  Iceland = 'Iceland',\r\n  India = 'India',\r\n  Indonesia = 'Indonesia',\r\n  Iran = 'Iran',\r\n  Iraq = 'Iraq',\r\n  Ireland = 'Ireland',\r\n  Israel = 'Israel',\r\n  Italy = 'Italy',\r\n  IvoryCoast = 'Ivory Coast',\r\n  Jamaica = 'Jamaica',\r\n  Japan = 'Japan',\r\n  Jordan = 'Jordan',\r\n  Kazakhstan = 'Kazakhstan',\r\n  Kenya = 'Kenya',\r\n  Kiribati = 'Kiribati',\r\n  KoreaNorth = 'Korea (North)',\r\n  KoreaSouth = 'Korea (South)',\r\n  Kosovo = 'Kosovo',\r\n  Kuwait = 'Kuwait',\r\n  Kyrgyzstan = 'Kyrgyzstan',\r\n  Laos = 'Laos',\r\n  Latvia = 'Latvia',\r\n  Lebanon = 'Lebanon',\r\n  Lesotho = 'Lesotho',\r\n  Liberia = 'Liberia',\r\n  Libya = 'Libya',\r\n  Liechtenstein = 'Liechtenstein',\r\n  Lithuania = 'Lithuania',\r\n  Luxembourg = 'Luxembourg',\r\n  Madagascar = 'Madagascar',\r\n  Malawi = 'Malawi',\r\n  Malaysia = 'Malaysia',\r\n  Maldives = 'Maldives',\r\n  Mali = 'Mali',\r\n  Malta = 'Malta',\r\n  MarshallIslands = 'Marshall Islands',\r\n  Mauritania = 'Mauritania',\r\n  Mauritius = 'Mauritius',\r\n  Mexico = 'Mexico',\r\n  Micronesia = 'Micronesia',\r\n  Moldova = 'Moldova',\r\n  Monaco = 'Monaco',\r\n  Mongolia = 'Mongolia',\r\n  Montenegro = 'Montenegro',\r\n  Morocco = 'Morocco',\r\n  Mozambique = 'Mozambique',\r\n  Myanmar = 'Myanmar',\r\n  Namibia = 'Namibia',\r\n  Nauru = 'Nauru',\r\n  Nepal = 'Nepal',\r\n  Netherlands = 'Netherlands',\r\n  NewZealand = 'New Zealand',\r\n  Nicaragua = 'Nicaragua',\r\n  Niger = 'Niger',\r\n  Nigeria = 'Nigeria',\r\n  NorthMacedonia = 'North Macedonia',\r\n  Norway = 'Norway',\r\n  Oman = 'Oman',\r\n  Pakistan = 'Pakistan',\r\n  Palau = 'Palau',\r\n  Palestine = 'Palestine',\r\n  Panama = 'Panama',\r\n  PapuaNewGuinea = 'Papua New Guinea',\r\n  Paraguay = 'Paraguay',\r\n  Peru = 'Peru',\r\n  Philippines = 'Philippines',\r\n  Poland = 'Poland',\r\n  Portugal = 'Portugal',\r\n  Qatar = 'Qatar',\r\n  Romania = 'Romania',\r\n  Russia = 'Russia',\r\n  Rwanda = 'Rwanda',\r\n  SaintKittsAndNevis = 'Saint Kitts and Nevis',\r\n  SaintLucia = 'Saint Lucia',\r\n  SaintVincentAndTheGrenadines = 'Saint Vincent and the Grenadines',\r\n  Samoa = 'Samoa',\r\n  SanMarino = 'San Marino',\r\n  SaoTomeAndPrincipe = 'Sao Tome and Principe',\r\n  SaudiArabia = 'Saudi Arabia',\r\n  Senegal = 'Senegal',\r\n  Serbia = 'Serbia',\r\n  Seychelles = 'Seychelles',\r\n  SierraLeone = 'Sierra Leone',\r\n  Singapore = 'Singapore',\r\n  Slovakia = 'Slovakia',\r\n  Slovenia = 'Slovenia',\r\n  SolomonIslands = 'Solomon Islands',\r\n  Somalia = 'Somalia',\r\n  SouthAfrica = 'South Africa',\r\n  SouthSudan = 'South Sudan',\r\n  Spain = 'Spain',\r\n  SriLanka = 'Sri Lanka',\r\n  Sudan = 'Sudan',\r\n  Suriname = 'Suriname',\r\n  Sweden = 'Sweden',\r\n  Switzerland = 'Switzerland',\r\n  Syria = 'Syria',\r\n  Taiwan = 'Taiwan',\r\n  Tajikistan = 'Tajikistan',\r\n  Tanzania = 'Tanzania',\r\n  Thailand = 'Thailand',\r\n  Togo = 'Togo',\r\n  Tonga = 'Tonga',\r\n  TrinidadAndTobago = 'Trinidad and Tobago',\r\n  Tunisia = 'Tunisia',\r\n  Turkey = 'Turkey',\r\n  Turkmenistan = 'Turkmenistan',\r\n  Tuvalu = 'Tuvalu',\r\n  Uganda = 'Uganda',\r\n  Ukraine = 'Ukraine',\r\n  UnitedArabEmirates = 'United Arab Emirates',\r\n  UnitedKingdom = 'United Kingdom',\r\n  UnitedStates = 'United States',\r\n  Uruguay = 'Uruguay',\r\n  Uzbekistan = 'Uzbekistan',\r\n  Vanuatu = 'Vanuatu',\r\n  VaticanCity = 'Vatican City',\r\n  Venezuela = 'Venezuela',\r\n  Vietnam = 'Vietnam',\r\n  Yemen = 'Yemen',\r\n  Zambia = 'Zambia',\r\n  Zimbabwe = 'Zimbabwe',\r\n}\r\n\r\nexport enum UserPermission {\r\n  Admin = 'admin',\r\n  User = 'user',\r\n}\r\n\r\n@Entity()\r\nexport class User {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({ length: 100, unique: true })\r\n  @Length(2, 100)\r\n  name: string;\r\n\r\n  @Column({ type: String, unique: true, nullable: true })\r\n  email: string | null;\r\n\r\n  @Column({ nullable: true })\r\n  @Exclude({ toPlainOnly: true })\r\n  password: string;\r\n\r\n  @Exclude({ toPlainOnly: true })\r\n  public previousPassword: string;\r\n\r\n  @AfterLoad()\r\n  public loadPreviousPassword(): void {\r\n    this.previousPassword = this.password;\r\n  }\r\n\r\n  @BeforeInsert()\r\n  async hashPasswordBeforeInsert() {\r\n    await this.hashPassword();\r\n  }\r\n\r\n  @BeforeUpdate()\r\n  async hashPasswordBeforeUpdate() {\r\n    if (this.password !== this.previousPassword) {\r\n      await this.hashPassword();\r\n    }\r\n  }\r\n\r\n  private async hashPassword() {\r\n    if (this.password && !this.isPasswordHashed(this.password)) {\r\n      console.log(`Hashing password: ${this.password}`);\r\n      this.password = await hashPassword(this.password);\r\n      console.log(`Hashed password: ${this.password}`);\r\n    }\r\n  }\r\n\r\n  private isPasswordHashed(password: string): boolean {\r\n    return password.startsWith('$2a$') || password.startsWith('$2b$');\r\n  }\r\n\r\n  @Column({ default: AuthProvidersEnum.email })\r\n  provider: string;\r\n\r\n  @Column({ type: 'enum', enum: UserStatus, default: UserStatus.Active })\r\n  status: UserStatus;\r\n\r\n  @Column({\r\n    type: 'enum',\r\n    enum: UserPermission,\r\n    default: UserPermission.User,\r\n  })\r\n  permission: UserPermission;\r\n\r\n  @CreateDateColumn()\r\n  createdAt: Date;\r\n\r\n  @Column({ type: String, nullable: true })\r\n  @Index()\r\n  @Exclude({ toPlainOnly: true })\r\n  hash: string | null;\r\n\r\n  @UpdateDateColumn()\r\n  updatedAt: Date;\r\n\r\n  @Column({ type: 'decimal', precision: 15, scale: 4, default: 0 })\r\n  balance: number;\r\n\r\n  @Column({ type: 'decimal', precision: 15, scale: 4, default: 0 })\r\n  copytrade_balance: number;\r\n\r\n  @Column({ type: 'decimal', precision: 15, scale: 4, default: 0 })\r\n  plan_balance: number;\r\n\r\n  @Column({ type: Boolean, default: false })\r\n  isVerified: boolean;\r\n\r\n  @Column({ type: String })\r\n  referral_id: string;\r\n\r\n  @Column({ type: String, nullable: true })\r\n  front_image: string;\r\n\r\n  @Column({ type: String, nullable: true })\r\n  back_image: string;\r\n\r\n  @Column({ type: String })\r\n  phone_number: string;\r\n\r\n  @Column({ type: String })\r\n  address: string;\r\n\r\n  @Column({ type: 'enum', enum: Gender })\r\n  gender: Gender;\r\n\r\n  @Column({ type: 'enum', enum: Country })\r\n  country: Country;\r\n\r\n  // @Column({ type: Boolean, default: false })\r\n  // suspended: boolean;\r\n  @OneToMany(() => Transaction, (transaction) => transaction.user, {\r\n    cascade: true,\r\n  })\r\n  transactions: Transaction;\r\n\r\n  @OneToMany(() => Plan, (plan) => plan.user, {\r\n    cascade: true,\r\n  })\r\n  plan: Plan;\r\n\r\n  @OneToMany(() => CopyTrade, (copytrade) => copytrade.user, {\r\n    cascade: true,\r\n  })\r\n  copytrade: CopyTrade;\r\n\r\n  @OneToMany(() => CryptoWallet, (wallet) => wallet.user, {\r\n    cascade: true,\r\n  })\r\n  crypto_wallet: CryptoWallet;\r\n\r\n  @DeleteDateColumn()\r\n  deletedAt?: Date;\r\n}\r\n"]}