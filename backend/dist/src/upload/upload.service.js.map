{"version":3,"file":"upload.service.js","sourceRoot":"/","sources":["src/upload/upload.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable } from '@nestjs/common';\r\nimport multer from 'multer';\r\nimport { diskStorage } from 'multer';\r\nimport { extname } from 'path';\r\nimport fs from 'fs';\r\n\r\n@Injectable()\r\nexport class UploadService {\r\n  constructor() {}\r\n\r\n  getUploadMiddleware(\r\n    location: string,\r\n    multerFields: { name: string; maxCount: number }[],\r\n    formats: string[],\r\n  ) {\r\n    if (!fs.existsSync(location)) {\r\n      fs.mkdirSync(location, { recursive: true });\r\n    }\r\n    const multerInstance = multer({\r\n      storage: diskStorage({\r\n        destination: (_, __, cb) => {\r\n          cb(null, location);\r\n        },\r\n        filename: (_, file, cb) => {\r\n          const fileExtName = extname(file.originalname);\r\n          const fileFormat = file.mimetype.split('/')[1];\r\n          if (!formats.includes(fileFormat)) {\r\n            return cb(\r\n              new Error(\r\n                `Invalid file format. Please upload files in one of the following formats: ${formats.join(', ')}`,\r\n              ),\r\n              undefined,\r\n            );\r\n          }\r\n          const randomName = Array(4)\r\n            .fill(null)\r\n            .map(() => Math.random().toString(36).substring(2, 15))\r\n            .join('');\r\n          cb(null, `${randomName}${fileExtName}`);\r\n        },\r\n      }),\r\n      fileFilter: (_, file, cb) => {\r\n        const fileFormat = file.mimetype.split('/')[1];\r\n        if (!formats.includes(fileFormat)) {\r\n          return cb(null, false);\r\n        }\r\n        cb(null, true);\r\n      },\r\n      limits: { fileSize: 10 * 1024 * 1024 }, // Limit file size to 10MB\r\n    });\r\n\r\n    return (req: any, res: any) => {\r\n      return new Promise<void>((resolve, reject) => {\r\n        multerInstance.fields(multerFields)(req, res, (err: any) => {\r\n          if (err) {\r\n            console.error(err);\r\n            reject(res.status(502).json({ error: err.message }));\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    };\r\n  }\r\n}\r\n"]}