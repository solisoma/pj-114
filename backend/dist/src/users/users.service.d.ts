import { DeepPartial, Repository } from 'typeorm';
import { EntityCondition } from 'src/utils/types/entity-condition.type';
import { NullableType } from 'src/utils/types/nullable.type';
import { IPaginationOptions } from 'src/utils/types/pagination-options';
import { IUsersService } from './users';
import { User } from 'src/typeorm/entities/user.entity';
import { CreateUserDto } from './dto/createUserDto';
import { ChangePasswordDto } from './dto/changePasswordDto';
import { adminChangeUserStatusDto, DepositDto, KycDto, ProofDto, transcDetailsDto, TransferDto, TrxCategory } from './dto/user.general.dto';
import { Transaction } from '@app/typeorm/entities/transaction.entity';
import { TransactionService } from '@app/transaction/transaction.service';
import { Referral } from '@app/typeorm/entities/referral.entity';
export declare class UsersService implements IUsersService {
    private readonly usersRepository;
    private readonly trxRepository;
    private readonly refRepository;
    private readonly trxService;
    constructor(usersRepository: Repository<User>, trxRepository: Repository<Transaction>, refRepository: Repository<Referral>, trxService: TransactionService);
    createUser(createUserDto: CreateUserDto): Promise<User>;
    findOneUser(options: EntityCondition<User>): Promise<NullableType<User>>;
    getAllUser(id: number): Promise<User[]>;
    findUsersWithPagination(paginationOptions: IPaginationOptions): Promise<User[]>;
    updateUser(id: User['id'], payload: DeepPartial<User>): Promise<User>;
    deleteUser(id: User['id']): Promise<void>;
    saveUser(user: User): Promise<User>;
    adminChangeUserStatus(id: number, userDetail: adminChangeUserStatusDto): Promise<void>;
    updateBalance(id: number, transcDetails: transcDetailsDto): Promise<void>;
    addDepositProof(proof: ProofDto): Promise<void>;
    handleKYC(id: number, details: KycDto): Promise<void>;
    deposit(id: number, details: DepositDto): Promise<Transaction>;
    withdraw(id: number, details: DepositDto): Promise<Transaction>;
    transfer(id: number, trxDetails: TransferDto): Promise<void>;
    getTrx(id: number, category: TrxCategory): Promise<Transaction[]>;
    changePassword(id: number, changePasswordDto: ChangePasswordDto): Promise<void>;
    getRefferrals(id: number): Promise<Referral[]>;
}
