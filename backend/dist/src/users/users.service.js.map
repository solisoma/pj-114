{"version":3,"file":"users.service.js","sourceRoot":"/","sources":["src/users/users.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,2CAAuE;AACvE,qCAAkD;AAClD,6CAAmD;AAKnD,iEAAwE;AAExE,8CAA8D;AAI9D,6DAUgC;AAChC,+EAIkD;AAClD,4EAA0E;AAC1E,yEAAiE;AAG1D,IAAM,YAAY,GAAlB,MAAM,YAAY;IACvB,YAEmB,eAAiC,EAEjC,aAAsC,EAEtC,aAAmC,EACnC,UAA8B;QAL9B,oBAAe,GAAf,eAAe,CAAkB;QAEjC,kBAAa,GAAb,aAAa,CAAyB;QAEtC,kBAAa,GAAb,aAAa,CAAsB;QACnC,eAAU,GAAV,UAAU,CAAoB;IAE9C,CAAC;IAEJ,KAAK,CAAC,UAAU,CAAC,aAA4B;QAC3C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACtD,KAAK,EAAE,EAAE,KAAK,EAAE,aAAa,CAAC,KAAK,EAAE;SACtC,CAAC,CAAC;QACH,IAAI,YAAY;YACd,MAAM,IAAI,sBAAa,CAAC,qBAAqB,EAAE,mBAAU,CAAC,QAAQ,CAAC,CAAC;QACtE,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACxD,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,WAAW,CACf,OAA8B;QAE9B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YAC9C,KAAK,EAAE,OAAO;SACf,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EAAU;QACzB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAE1E,IAAI,WAAW,CAAC,UAAU,KAAK,4BAAc,CAAC,IAAI;YAChD,MAAM,IAAI,sBAAa,CAAC,aAAa,EAAE,mBAAU,CAAC,SAAS,CAAC,CAAC;QAE/D,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACrC,MAAM,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC;SAChC,CAAC,CAAC;IACL,CAAC;IAED,uBAAuB,CACrB,iBAAqC;QAErC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YAC/B,IAAI,EAAE,CAAC,iBAAiB,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,iBAAiB,CAAC,KAAK;YAC5D,IAAI,EAAE,iBAAiB,CAAC,KAAK;SAC9B,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EAAc,EAAE,OAA0B;QACzD,MAAM,gBAAgB,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QACpE,KAAK,MAAM,KAAK,IAAI,gBAAgB,EAAE,CAAC;YACrC,IAAI,KAAK,IAAI,OAAO,EAAE,CAAC;gBACrB,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC;QACH,CAAC;QAED,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;YACrB,OAAO,CAAC,QAAQ,GAAG,MAAM,IAAA,sBAAY,EAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAC/C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1E,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,sBAAa,CAAC,gBAAgB,EAAE,mBAAU,CAAC,SAAS,CAAC,CAAC;QAClE,CAAC;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EAAc;QAC7B,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,IAAU;QACvB,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,qBAAqB,CACzB,EAAU,EACV,UAAoC;QAEpC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC;QAEtC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACrE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACpD,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;SACtB,CAAC,CAAC;QAGH,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU;YACxB,MAAM,IAAI,sBAAa,CACrB,+BAA+B,EAC/B,mBAAU,CAAC,SAAS,CACrB,CAAC;QAGJ,IAAI,MAAM,CAAC,UAAU,KAAK,4BAAc,CAAC,IAAI;YAC3C,MAAM,IAAI,sBAAa,CACrB,kCAAkC,EAClC,mBAAU,CAAC,YAAY,CACxB,CAAC;QAEJ,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,0BAAO,CAAC,MAAM;gBACjB,IAAI,MAAM,CAAC,UAAU,KAAK,4BAAc,CAAC,KAAK,EAAE,CAAC;oBAC/C,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC5C,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,sBAAa,CACrB,kCAAkC,EAClC,mBAAU,CAAC,YAAY,CACxB,CAAC;gBACJ,CAAC;gBACD,MAAM;YACR,KAAK,0BAAO,CAAC,MAAM;gBACjB,IAAI,MAAM,CAAC,UAAU,KAAK,4BAAc,CAAC,KAAK,EAAE,CAAC;oBAC/C,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;gBAClE,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,sBAAa,CACrB,kCAAkC,EAClC,mBAAU,CAAC,YAAY,CACxB,CAAC;gBACJ,CAAC;gBACD,MAAM;YACR,KAAK,0BAAO,CAAC,SAAS;gBACpB,IAAI,MAAM,CAAC,UAAU,KAAK,4BAAc,CAAC,KAAK,EAAE,CAAC;oBAC/C,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;gBACnE,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,sBAAa,CACrB,kCAAkC,EAClC,mBAAU,CAAC,YAAY,CACxB,CAAC;gBACJ,CAAC;gBACD,MAAM;YACR,KAAK,0BAAO,CAAC,OAAO;gBAClB,IAAI,MAAM,CAAC,UAAU,KAAK,4BAAc,CAAC,KAAK,EAAE,CAAC;oBAC/C,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE;wBACxC,UAAU,EAAE,4BAAc,CAAC,KAAK;qBACjC,CAAC,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,sBAAa,CACrB,kCAAkC,EAClC,mBAAU,CAAC,YAAY,CACxB,CAAC;gBACJ,CAAC;gBACD,MAAM;YACR,KAAK,0BAAO,CAAC,MAAM;gBACjB,IAAI,MAAM,CAAC,UAAU,KAAK,4BAAc,CAAC,KAAK,EAAE,CAAC;oBAC/C,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE;wBACxC,UAAU,EAAE,4BAAc,CAAC,IAAI;qBAChC,CAAC,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,sBAAa,CACrB,kCAAkC,EAClC,mBAAU,CAAC,YAAY,CACxB,CAAC;gBACJ,CAAC;gBACD,MAAM;QACV,CAAC;IACH,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,EAAU,EACV,aAA+B;QAE/B,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,aAAa,CAAC;QAEpD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACrE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACpD,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;SACtB,CAAC,CAAC;QAGH,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU;YACxB,MAAM,IAAI,sBAAa,CACrB,+BAA+B,EAC/B,mBAAU,CAAC,SAAS,CACrB,CAAC;QAEJ,IAAI,UAAkB,CAAC;QACvB,QAAQ,SAAS,EAAE,CAAC;YAClB,KAAK,6BAAU,CAAC,IAAI;gBAClB,UAAU,GAAG,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC;gBACzC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;gBACnE,IAAI,aAAa,CAAC,GAAG;oBACnB,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE;wBACtC,OAAO,EAAE,MAAM;wBACf,MAAM;wBACN,MAAM,EAAE,8BAAS,CAAC,UAAU;wBAC5B,QAAQ,EAAE,6BAAQ,CAAC,GAAG;qBACvB,CAAC,CAAC;gBACL,MAAM;YACR,KAAK,6BAAU,CAAC,OAAO;gBACrB,IAAI,MAAM,CAAC,UAAU,KAAK,4BAAc,CAAC,KAAK,EAAE,CAAC;oBAC/C,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;oBACzD,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE;wBACxC,OAAO,EAAE,UAAU;qBACpB,CAAC,CAAC;oBACH,IAAI,aAAa,CAAC,GAAG;wBACnB,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE;4BACtC,OAAO,EAAE,QAAQ;4BACjB,MAAM;4BACN,MAAM,EAAE,8BAAS,CAAC,UAAU;4BAC5B,QAAQ,EAAE,6BAAQ,CAAC,GAAG;yBACvB,CAAC,CAAC;gBACP,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,sBAAa,CACrB,kCAAkC,EAClC,mBAAU,CAAC,YAAY,CACxB,CAAC;gBACJ,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,KAAe;QACnC,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;QAE3B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAEhE,IAAI,CAAC,GAAG;YACN,MAAM,IAAI,sBAAa,CAAC,uBAAuB,EAAE,mBAAU,CAAC,SAAS,CAAC,CAAC;QACzE,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,EAAU,EAAE,OAAe;QACzC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC;QAC/B,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAU,EAAE,OAAmB;QAC3C,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;QAC1C,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE;YACzC,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,6BAAQ,CAAC,OAAO;YAC1B,MAAM;YACN,aAAa,EAAE,aAAa,IAAI,EAAE;SACnC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAU,EAAE,OAAmB;QAC5C,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;QAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,sBAAa,CAAC,oBAAoB,EAAE,mBAAU,CAAC,SAAS,CAAC,CAAC;QAEtE,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;QAC3C,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;QAC/D,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE;YACzC,OAAO,EAAE,YAAY;YACrB,QAAQ,EAAE,6BAAQ,CAAC,UAAU;YAC7B,MAAM;YACN,aAAa,EAAE,aAAa,IAAI,EAAE;SACnC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAU,EAAE,UAAuB;QAChD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACnE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC;QAExC,MAAM,IAAI,GAAG,CAAC,SAAS,EAAE,mBAAmB,EAAE,cAAc,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACtB,MAAM,IAAI,sBAAa,CACrB,2DAA2D,MAAM,CAAC,IAAI,CAAC,EAAE,EACzE,mBAAU,CAAC,QAAQ,CACpB,CAAC;QAEJ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YACpB,MAAM,IAAI,sBAAa,CACrB,yDAAyD,MAAM,CAAC,IAAI,CAAC,EAAE,EACvE,mBAAU,CAAC,QAAQ,CACpB,CAAC;QAEJ,IAAI,IAAI,KAAK,EAAE;YACb,MAAM,IAAI,sBAAa,CACrB,iCAAiC,EACjC,mBAAU,CAAC,QAAQ,CACpB,CAAC;QAEJ,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,MAAM,EAAE,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YACjD,IAAI,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YAE7C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChC,OAAO;QACT,CAAC;QAED,MAAM,IAAI,sBAAa,CAAC,oBAAoB,EAAE,mBAAU,CAAC,QAAQ,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,QAAqB;QAC5C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAGrE,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,sBAAa,CAAC,oBAAoB,EAAE,mBAAU,CAAC,SAAS,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,8BAAW,CAAC,GAAG;YAC9B,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;gBACnC,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE;gBACvB,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;aACtB,CAAC,CAAC;QAEL,IAAI,QAAQ,KAAK,8BAAW,CAAC,OAAO;YAClC,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;gBACnC,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,6BAAQ,CAAC,OAAO,EAAE;gBACnD,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;aACtB,CAAC,CAAC;QAEL,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;YACnC,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,6BAAQ,CAAC,UAAU,EAAE;YACtD,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;SACtB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,cAAc,CAClB,EAAU,EACV,iBAAoC;QAEpC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACtD,KAAK,EAAE,EAAE,EAAE,EAAE;SACd,CAAC,CAAC;QACH,IAAI,CAAC,YAAY;YACf,MAAM,IAAI,sBAAa,CAAC,gBAAgB,EAAE,mBAAU,CAAC,SAAS,CAAC,CAAC;QAElE,MAAM,eAAe,GAAG,MAAM,IAAA,qBAAW,EACvC,iBAAiB,CAAC,eAAe,EACjC,YAAY,CAAC,QAAQ,CACtB,CAAC;QAEF,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,IAAI,sBAAa,CACrB;gBACE,MAAM,EAAE,mBAAU,CAAC,oBAAoB;gBACvC,MAAM,EAAE;oBACN,QAAQ,EAAE,0BAA0B;iBACrC;aACF,EACD,mBAAU,CAAC,oBAAoB,CAChC,CAAC;QACJ,CAAC;QAED,IAAI,iBAAiB,CAAC,WAAW,KAAK,iBAAiB,CAAC,kBAAkB;YACxE,MAAM,IAAI,sBAAa,CACrB,8CAA8C,EAC9C,mBAAU,CAAC,WAAW,CACvB,CAAC;QAEJ,MAAM,cAAc,GAAG,MAAM,IAAA,sBAAY,EAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QACzE,MAAM,IAAI,GAAG;YACX,GAAG,YAAY;YACf,QAAQ,EAAE,cAAc;SACzB,CAAC;QAEF,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,EAAU;QAC5B,OAAO,MAAM,IAAI,CAAC,aAAa;aAC5B,kBAAkB,CAAC,KAAK,CAAC;aACzB,iBAAiB,CAAC,UAAU,EAAE,MAAM,CAAC;aACrC,MAAM,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;aAC5B,KAAK,CAAC,kBAAkB,EAAE,EAAE,EAAE,EAAE,CAAC;aACjC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;aACzB,OAAO,EAAE,CAAC;IACf,CAAC;CACF,CAAA;AAjXY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,kBAAI,CAAC,CAAA;IAEtB,WAAA,IAAA,0BAAgB,EAAC,gCAAW,CAAC,CAAA;IAE7B,WAAA,IAAA,0BAAgB,EAAC,0BAAQ,CAAC,CAAA;qCAHO,oBAAU;QAEZ,oBAAU;QAEV,oBAAU;QACb,wCAAkB;GARtC,YAAY,CAiXxB","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { DeepPartial, Repository } from 'typeorm';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { EntityCondition } from 'src/utils/types/entity-condition.type';\r\nimport { NullableType } from 'src/utils/types/nullable.type';\r\nimport { IPaginationOptions } from 'src/utils/types/pagination-options';\r\nimport { IUsersService } from './users';\r\nimport { User, UserPermission } from 'src/typeorm/entities/user.entity';\r\nimport { CreateUserDto } from './dto/createUserDto';\r\nimport { compareHash, hashPassword } from 'src/utils/helpers';\r\nimport { ChangePasswordDto } from './dto/changePasswordDto';\r\n// import { Services } from 'src/utils/constants';\r\n// import { IMailsService } from 'src/mails/mails';\r\nimport {\r\n  Actions,\r\n  adminChangeUserStatusDto,\r\n  DepositDto,\r\n  Directions,\r\n  KycDto,\r\n  ProofDto,\r\n  transcDetailsDto,\r\n  TransferDto,\r\n  TrxCategory,\r\n} from './dto/user.general.dto';\r\nimport {\r\n  Category,\r\n  Transaction,\r\n  TrxStatus,\r\n} from '@app/typeorm/entities/transaction.entity';\r\nimport { TransactionService } from '@app/transaction/transaction.service';\r\nimport { Referral } from '@app/typeorm/entities/referral.entity';\r\n\r\n@Injectable()\r\nexport class UsersService implements IUsersService {\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private readonly usersRepository: Repository<User>,\r\n    @InjectRepository(Transaction)\r\n    private readonly trxRepository: Repository<Transaction>,\r\n    @InjectRepository(Referral)\r\n    private readonly refRepository: Repository<Referral>,\r\n    private readonly trxService: TransactionService,\r\n    // @Inject(Services.MAILS) private readonly mailsService: IMailsService,\r\n  ) {}\r\n\r\n  async createUser(createUserDto: CreateUserDto): Promise<User> {\r\n    const existingUser = await this.usersRepository.findOne({\r\n      where: { email: createUserDto.email },\r\n    });\r\n    if (existingUser)\r\n      throw new HttpException('User already exists', HttpStatus.CONFLICT);\r\n    const user = this.usersRepository.create(createUserDto);\r\n    return await this.usersRepository.save(user);\r\n  }\r\n\r\n  async findOneUser(\r\n    options: EntityCondition<User>,\r\n  ): Promise<NullableType<User>> {\r\n    const user = await this.usersRepository.findOne({\r\n      where: options,\r\n    });\r\n\r\n    return user;\r\n  }\r\n\r\n  async getAllUser(id: number): Promise<User[]> {\r\n    const currentUser = await this.usersRepository.findOne({ where: { id } });\r\n\r\n    if (currentUser.permission === UserPermission.User)\r\n      throw new HttpException('Not allowed', HttpStatus.FORBIDDEN);\r\n\r\n    return await this.usersRepository.find({\r\n      select: ['id', 'name', 'email'],\r\n    });\r\n  }\r\n\r\n  findUsersWithPagination(\r\n    paginationOptions: IPaginationOptions,\r\n  ): Promise<User[]> {\r\n    return this.usersRepository.find({\r\n      skip: (paginationOptions.page - 1) * paginationOptions.limit,\r\n      take: paginationOptions.limit,\r\n    });\r\n  }\r\n\r\n  async updateUser(id: User['id'], payload: DeepPartial<User>): Promise<User> {\r\n    const restrictedFields = ['provider', 'status', 'hash', 'socialId'];\r\n    for (const field of restrictedFields) {\r\n      if (field in payload) {\r\n        delete payload[field];\r\n      }\r\n    }\r\n\r\n    if (payload.password) {\r\n      payload.password = await hashPassword(payload.password);\r\n    }\r\n\r\n    await this.usersRepository.update(id, payload);\r\n    const updatedUser = await this.usersRepository.findOne({ where: { id } });\r\n    if (!updatedUser) {\r\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return updatedUser;\r\n  }\r\n\r\n  async deleteUser(id: User['id']): Promise<void> {\r\n    await this.usersRepository.softDelete(id);\r\n  }\r\n\r\n  async saveUser(user: User): Promise<User> {\r\n    return this.usersRepository.save(user);\r\n  }\r\n\r\n  async adminChangeUserStatus(\r\n    id: number,\r\n    userDetail: adminChangeUserStatusDto,\r\n  ): Promise<void> {\r\n    const { action, userId } = userDetail;\r\n\r\n    const isUser = await this.usersRepository.findOne({ where: { id } });\r\n    const objectUser = await this.usersRepository.findOne({\r\n      where: { id: userId },\r\n    });\r\n\r\n    // Does users exist\r\n    if (!isUser || !objectUser)\r\n      throw new HttpException(\r\n        \"One of the user doesn't exist\",\r\n        HttpStatus.NOT_FOUND,\r\n      );\r\n\r\n    // is user admin or super admin\r\n    if (isUser.permission === UserPermission.User)\r\n      throw new HttpException(\r\n        \"User doesn't have the permission\",\r\n        HttpStatus.UNAUTHORIZED,\r\n      );\r\n\r\n    switch (action) {\r\n      case Actions.Delete:\r\n        if (isUser.permission === UserPermission.Admin) {\r\n          await this.usersRepository.delete(userId);\r\n        } else {\r\n          throw new HttpException(\r\n            \"User doesn't have the permission\",\r\n            HttpStatus.UNAUTHORIZED,\r\n          );\r\n        }\r\n        break;\r\n      case Actions.Verify:\r\n        if (isUser.permission === UserPermission.Admin) {\r\n          await this.usersRepository.update(userId, { isVerified: true });\r\n        } else {\r\n          throw new HttpException(\r\n            \"User doesn't have the permission\",\r\n            HttpStatus.UNAUTHORIZED,\r\n          );\r\n        }\r\n        break;\r\n      case Actions.NotVerify:\r\n        if (isUser.permission === UserPermission.Admin) {\r\n          await this.usersRepository.update(userId, { isVerified: false });\r\n        } else {\r\n          throw new HttpException(\r\n            \"User doesn't have the permission\",\r\n            HttpStatus.UNAUTHORIZED,\r\n          );\r\n        }\r\n        break;\r\n      case Actions.ToAdmin:\r\n        if (isUser.permission === UserPermission.Admin) {\r\n          await this.usersRepository.update(userId, {\r\n            permission: UserPermission.Admin,\r\n          });\r\n        } else {\r\n          throw new HttpException(\r\n            \"User doesn't have the permission\",\r\n            HttpStatus.UNAUTHORIZED,\r\n          );\r\n        }\r\n        break;\r\n      case Actions.ToUser:\r\n        if (isUser.permission === UserPermission.Admin) {\r\n          await this.usersRepository.update(userId, {\r\n            permission: UserPermission.User,\r\n          });\r\n        } else {\r\n          throw new HttpException(\r\n            \"User doesn't have the permission\",\r\n            HttpStatus.UNAUTHORIZED,\r\n          );\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  async updateBalance(\r\n    id: number,\r\n    transcDetails: transcDetailsDto,\r\n  ): Promise<void> {\r\n    const { amount, userId, direction } = transcDetails;\r\n\r\n    const isUser = await this.usersRepository.findOne({ where: { id } });\r\n    const objectUser = await this.usersRepository.findOne({\r\n      where: { id: userId },\r\n    });\r\n\r\n    // Does users exist\r\n    if (!isUser || !objectUser)\r\n      throw new HttpException(\r\n        \"One of the user doesn't exist\",\r\n        HttpStatus.NOT_FOUND,\r\n      );\r\n\r\n    let newBalance: number;\r\n    switch (direction) {\r\n      case Directions.Send:\r\n        newBalance = objectUser.balance - amount;\r\n        await this.usersRepository.update(userId, { balance: newBalance });\r\n        if (transcDetails.pnl)\r\n          await this.trxService.createTrx(userId, {\r\n            service: `Loss`,\r\n            amount,\r\n            status: TrxStatus.Successful,\r\n            category: Category.PNL,\r\n          });\r\n        break;\r\n      case Directions.Receive:\r\n        if (isUser.permission === UserPermission.Admin) {\r\n          newBalance = Number(objectUser.balance) + Number(amount);\r\n          await this.usersRepository.update(userId, {\r\n            balance: newBalance,\r\n          });\r\n          if (transcDetails.pnl)\r\n            await this.trxService.createTrx(userId, {\r\n              service: `Profit`,\r\n              amount,\r\n              status: TrxStatus.Successful,\r\n              category: Category.PNL,\r\n            });\r\n        } else {\r\n          throw new HttpException(\r\n            \"User doesn't have the permission\",\r\n            HttpStatus.UNAUTHORIZED,\r\n          );\r\n        }\r\n    }\r\n  }\r\n\r\n  async addDepositProof(proof: ProofDto): Promise<void> {\r\n    const { id, file } = proof;\r\n\r\n    const trx = await this.trxRepository.findOne({ where: { id } });\r\n\r\n    if (!trx)\r\n      throw new HttpException('Transaction not found', HttpStatus.NOT_FOUND);\r\n    trx.proof = file;\r\n    this.trxRepository.save(trx);\r\n  }\r\n\r\n  async handleKYC(id: number, details: KycDto): Promise<void> {\r\n    const user = await this.usersRepository.findOne({ where: { id } });\r\n    user.front_image = details.front;\r\n    user.back_image = details.back;\r\n    await this.usersRepository.save(user);\r\n  }\r\n\r\n  async deposit(id: number, details: DepositDto): Promise<Transaction> {\r\n    const { amount, walletAddress } = details;\r\n    return await this.trxService.createTrx(id, {\r\n      service: 'Deposit',\r\n      category: Category.Deposit,\r\n      amount,\r\n      walletAddress: walletAddress || '',\r\n    });\r\n  }\r\n\r\n  async withdraw(id: number, details: DepositDto): Promise<Transaction> {\r\n    const { amount, walletAddress } = details;\r\n    const isUser = await this.usersRepository.findOne({ where: { id } });\r\n    if (!isUser)\r\n      throw new HttpException(\"User doesn't exist\", HttpStatus.NOT_FOUND);\r\n\r\n    const newBalance = isUser.balance - amount;\r\n    await this.usersRepository.update(id, { balance: newBalance });\r\n    return await this.trxService.createTrx(id, {\r\n      service: 'Withdrawal',\r\n      category: Category.Withdrawal,\r\n      amount,\r\n      walletAddress: walletAddress || '',\r\n    });\r\n  }\r\n\r\n  async transfer(id: number, trxDetails: TransferDto): Promise<void> {\r\n    const user = await this.usersRepository.findOne({ where: { id } });\r\n    const { from, to, amount } = trxDetails;\r\n\r\n    const keys = ['balance', 'copytrade_balance', 'plan_balance'];\r\n    if (!keys.includes(from))\r\n      throw new HttpException(\r\n        `Wrong value for field \"from\" must be one of this values ${String(keys)}`,\r\n        HttpStatus.CONFLICT,\r\n      );\r\n\r\n    if (!keys.includes(to))\r\n      throw new HttpException(\r\n        `Wrong value for field \"to\" must be one of this values ${String(keys)}`,\r\n        HttpStatus.CONFLICT,\r\n      );\r\n\r\n    if (from === to)\r\n      throw new HttpException(\r\n        \"from and to can't be same value\",\r\n        HttpStatus.CONFLICT,\r\n      );\r\n\r\n    if (user[from] >= amount) {\r\n      user[from] = Number(user[from]) - Number(amount);\r\n      user[to] = Number(user[to]) + Number(amount);\r\n\r\n      this.usersRepository.save(user);\r\n      return;\r\n    }\r\n\r\n    throw new HttpException('Insufficient funds', HttpStatus.CONFLICT);\r\n  }\r\n\r\n  async getTrx(id: number, category: TrxCategory): Promise<Transaction[]> {\r\n    const isUser = await this.usersRepository.findOne({ where: { id } });\r\n\r\n    // Does users exist\r\n    if (!isUser)\r\n      throw new HttpException(\"User doesn't exist\", HttpStatus.NOT_FOUND);\r\n    if (category === TrxCategory.All)\r\n      return await this.trxRepository.find({\r\n        where: { user: { id } },\r\n        order: { id: 'DESC' },\r\n      });\r\n\r\n    if (category === TrxCategory.Deposit)\r\n      return await this.trxRepository.find({\r\n        where: { user: { id }, category: Category.Deposit },\r\n        order: { id: 'DESC' },\r\n      });\r\n\r\n    return await this.trxRepository.find({\r\n      where: { user: { id }, category: Category.Withdrawal },\r\n      order: { id: 'DESC' },\r\n    });\r\n  }\r\n\r\n  async changePassword(\r\n    id: number,\r\n    changePasswordDto: ChangePasswordDto,\r\n  ): Promise<void> {\r\n    const existingUser = await this.usersRepository.findOne({\r\n      where: { id },\r\n    });\r\n    if (!existingUser)\r\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\r\n\r\n    const isValidPassword = await compareHash(\r\n      changePasswordDto.currentPassword,\r\n      existingUser.password,\r\n    );\r\n\r\n    if (!isValidPassword) {\r\n      throw new HttpException(\r\n        {\r\n          status: HttpStatus.UNPROCESSABLE_ENTITY,\r\n          errors: {\r\n            password: 'incorrectCurrentPassword',\r\n          },\r\n        },\r\n        HttpStatus.UNPROCESSABLE_ENTITY,\r\n      );\r\n    }\r\n\r\n    if (changePasswordDto.newPassword !== changePasswordDto.confirmNewPassword)\r\n      throw new HttpException(\r\n        'Confirm password does not match new password',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n\r\n    const hashedPassword = await hashPassword(changePasswordDto.newPassword);\r\n    const user = {\r\n      ...existingUser,\r\n      password: hashedPassword,\r\n    };\r\n\r\n    await this.usersRepository.save(user);\r\n  }\r\n\r\n  async getRefferrals(id: number): Promise<Referral[]> {\r\n    return await this.refRepository\r\n      .createQueryBuilder('ref')\r\n      .leftJoinAndSelect('ref.host', 'host')\r\n      .select(['ref', 'host.name']) // Select ref fields and only user.name\r\n      .where('ref.userId = :id', { id })\r\n      .orderBy('ref.id', 'DESC')\r\n      .getMany();\r\n  }\r\n}\r\n"]}