{"version":3,"file":"wallet.controller.js","sourceRoot":"/","sources":["src/wallet/wallet.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,2CAawB;AACxB,6CAAqE;AACrE,kDAA6C;AAC7C,+CAA6C;AAC7C,qDAAiD;AACjD,+CAAmE;AAK5D,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAC3B,YAA6B,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAAG,CAAC;IAUvD,AAAN,KAAK,CAAC,UAAU,CACc,eAAgC,EACrD,GAAQ;QAEf,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IAClE,CAAC;IASK,AAAN,KAAK,CAAC,SAAS,CAAQ,GAAQ;QAC7B,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IASK,AAAN,KAAK,CAAC,YAAY,CACY,YAA6B;QAEzD,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IACvD,CAAC;IASK,AAAN,KAAK,CAAC,YAAY,CACH,EAAU;QAEvB,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC;CACF,CAAA;AAxDY,4CAAgB;AAWrB;IARL,IAAA,kBAAS,EAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IAC3B,IAAA,aAAI,GAAE;IACN,IAAA,iBAAQ,EAAC,mBAAU,CAAC,UAAU,CAAC;IAC/B,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;IAC1C,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,8BAA8B;KAC5C,CAAC;IAEC,WAAA,IAAA,aAAI,EAAC,IAAI,uBAAc,EAAE,CAAC,CAAA;IAC1B,WAAA,IAAA,YAAG,GAAE,CAAA;;qCADuC,2BAAe;;kDAK7D;AASK;IAPL,IAAA,kBAAS,EAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IAC3B,IAAA,YAAG,GAAE;IACL,IAAA,iBAAQ,EAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,8BAA8B;KAC5C,CAAC;IACe,WAAA,IAAA,YAAG,GAAE,CAAA;;;;iDAGrB;AASK;IAPL,IAAA,kBAAS,EAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IAC3B,IAAA,YAAG,GAAE;IACL,IAAA,iBAAQ,EAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,8BAA8B;KAC5C,CAAC;IAEC,WAAA,IAAA,aAAI,EAAC,IAAI,uBAAc,EAAE,CAAC,CAAA;;qCAAe,2BAAe;;oDAG1D;AASK;IAPL,IAAA,kBAAS,EAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;IAC3B,IAAA,eAAM,EAAC,KAAK,CAAC;IACb,IAAA,iBAAQ,EAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,8BAA8B;KAC5C,CAAC;IAEC,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;;;;oDAGb;2BAvDU,gBAAgB;IAF5B,IAAA,iBAAO,EAAC,QAAQ,CAAC;IACjB,IAAA,mBAAU,EAAC,kBAAM,CAAC,MAAM,CAAC;qCAEoB,8BAAa;GAD9C,gBAAgB,CAwD5B","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n  ValidationPipe,\r\n} from '@nestjs/common';\r\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\r\nimport { Routes } from 'src/utils/constants';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { WalletService } from './wallet.service';\r\nimport { CreateWalletDto, UpdateWalletDto } from './dto/walletDto';\r\nimport { CryptoWallet } from '@app/typeorm/entities/bank.account.entity';\r\n\r\n@ApiTags('Wallet')\r\n@Controller(Routes.Wallet)\r\nexport class WalletController {\r\n  constructor(private readonly walletService: WalletService) {}\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Post()\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'create wallet' })\r\n  @ApiResponse({\r\n    status: 204,\r\n    description: 'User subscribed successfully',\r\n  })\r\n  async createUser(\r\n    @Body(new ValidationPipe()) createWalletDto: CreateWalletDto,\r\n    @Req() req: any,\r\n  ): Promise<CryptoWallet> {\r\n    const userId = req.user.id;\r\n    return this.walletService.createWallet(userId, createWalletDto);\r\n  }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Get()\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'wallets fetched successfully',\r\n  })\r\n  async getWallet(@Req() req: any): Promise<CryptoWallet[]> {\r\n    const userId = req.user.id;\r\n    return this.walletService.getWallet(userId);\r\n  }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Put()\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'wallets updated successfully',\r\n  })\r\n  async updateWallet(\r\n    @Body(new ValidationPipe()) updateWallet: UpdateWalletDto,\r\n  ): Promise<CryptoWallet> {\r\n    return this.walletService.updateWallet(updateWallet);\r\n  }\r\n\r\n  @UseGuards(AuthGuard('jwt'))\r\n  @Delete(':id')\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'wallets deleted successfully',\r\n  })\r\n  async deleteWallet(\r\n    @Param('id') id: number,\r\n  ): Promise<{ id: number; deleted: boolean }> {\r\n    return this.walletService.deleteWallet(id);\r\n  }\r\n}\r\n"]}