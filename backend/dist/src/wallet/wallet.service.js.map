{"version":3,"file":"wallet.service.js","sourceRoot":"/","sources":["src/wallet/wallet.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,2CAAuE;AACvE,qCAAqC;AACrC,6CAAmD;AACnD,iEAAyD;AAEzD,iFAAyE;AAIlE,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB,YAEmB,eAAiC,EAEjC,gBAA0C;QAF1C,oBAAe,GAAf,eAAe,CAAkB;QAEjC,qBAAgB,GAAhB,gBAAgB,CAA0B;IAC1D,CAAC;IAEJ,KAAK,CAAC,YAAY,CAChB,EAAU,EACV,eAAgC;QAEhC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACtD,KAAK,EAAE,EAAE,EAAE,EAAE;SACd,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY;YACf,MAAM,IAAI,sBAAa,CAAC,qBAAqB,EAAE,mBAAU,CAAC,QAAQ,CAAC,CAAC;QAEtE,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;YAC1C,GAAG,eAAe;YAClB,IAAI,EAAE,EAAE,EAAE,EAAE;SACb,CAAC,CAAC;QAEH,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,EAAU;QACxB,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACtC,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE;YACvB,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE;SAC9B,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,OAAwB;QACzC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;YACjD,KAAK,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE;SAC1B,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,sBAAa,CAAC,uBAAuB,EAAE,mBAAU,CAAC,QAAQ,CAAC,CAAC;QAExE,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,EAAE,GAAG,OAAO,EAAE,CAAC;QAE/C,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,EAAU;QAC3B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;gBACjD,KAAK,EAAE,EAAE,EAAE,EAAE;aACd,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM;gBACT,MAAM,IAAI,sBAAa,CAAC,uBAAuB,EAAE,mBAAU,CAAC,QAAQ,CAAC,CAAC;YAExE,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAE3C,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;CACF,CAAA;AA/DY,sCAAa;wBAAb,aAAa;IADzB,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,kBAAI,CAAC,CAAA;IAEtB,WAAA,IAAA,0BAAgB,EAAC,kCAAY,CAAC,CAAA;qCADG,oBAAU;QAET,oBAAU;GALpC,aAAa,CA+DzB","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { Repository } from 'typeorm';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { User } from '@app/typeorm/entities/user.entity';\r\nimport { CreateWalletDto, UpdateWalletDto } from './dto/walletDto';\r\nimport { CryptoWallet } from '@app/typeorm/entities/bank.account.entity';\r\nimport { IWalletService } from './wallet';\r\n\r\n@Injectable()\r\nexport class WalletService implements IWalletService {\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private readonly usersRepository: Repository<User>,\r\n    @InjectRepository(CryptoWallet)\r\n    private readonly walletRepository: Repository<CryptoWallet>,\r\n  ) {}\r\n\r\n  async createWallet(\r\n    id: number,\r\n    createWalletDto: CreateWalletDto,\r\n  ): Promise<CryptoWallet> {\r\n    const existingUser = await this.usersRepository.findOne({\r\n      where: { id },\r\n    });\r\n\r\n    if (!existingUser)\r\n      throw new HttpException(\"User doesn't exists\", HttpStatus.CONFLICT);\r\n\r\n    const wallet = this.walletRepository.create({\r\n      ...createWalletDto,\r\n      user: { id },\r\n    });\r\n\r\n    return await this.walletRepository.save(wallet);\r\n  }\r\n\r\n  async getWallet(id: number): Promise<CryptoWallet[]> {\r\n    return await this.walletRepository.find({\r\n      where: { user: { id } },\r\n      order: { created_at: 'DESC' },\r\n    });\r\n  }\r\n\r\n  async updateWallet(details: UpdateWalletDto): Promise<CryptoWallet> {\r\n    const wallet = await this.walletRepository.findOne({\r\n      where: { id: details.id },\r\n    });\r\n\r\n    if (!wallet)\r\n      throw new HttpException(\"Wallet doesn't exists\", HttpStatus.CONFLICT);\r\n\r\n    const updateWallet = { ...wallet, ...details };\r\n\r\n    return await this.walletRepository.save(updateWallet);\r\n  }\r\n\r\n  async deleteWallet(id: number): Promise<{ id: number; deleted: boolean }> {\r\n    try {\r\n      const wallet = await this.walletRepository.findOne({\r\n        where: { id },\r\n      });\r\n\r\n      if (!wallet)\r\n        throw new HttpException(\"Wallet doesn't exists\", HttpStatus.CONFLICT);\r\n\r\n      await this.walletRepository.softDelete(id);\r\n\r\n      return { id, deleted: true };\r\n    } catch {\r\n      return { id, deleted: false };\r\n    }\r\n  }\r\n}\r\n"]}